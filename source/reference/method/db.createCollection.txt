=====================
db.createCollection()
=====================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. method:: db.createCollection(name, options)

   Creates a new collection explicitly.

   Because MongoDB creates a collection implicitly when the collection
   is first referenced in a command, this method is used primarily for
   creating new :term:`capped collections <capped collection>`.

   :method:`db.createCollection()` is a wrapper around the database
   command :dbcommand:`create`.

   The :method:`db.createCollection()` method has the following prototype form:

   .. code-block:: javascript

      db.createCollection(<name>, { capped: <boolean>,
                                    autoIndexId: <boolean>,
                                    size: <number>,
                                    max: <number>,
                                    storageEngine: <document> } )

   The :method:`db.createCollection()` method has the following parameters:


   .. list-table::
      :header-rows: 1
      :widths: 20 20 80
   
      * - Parameter
   
        - Type
   
        - Description
   
      * - ``name``
   
        - string
   
        - The name of the collection to create.
          
          
   
      * - ``options``
   
        - document
   
        - Optional. Configuration options for creating a capped collection or for
          preallocating space in a new collection.
          
          
   


   The ``options`` document creates a capped collection or preallocates
   space in a new ordinary collection. The ``options`` document contains
   the following fields:


   .. list-table::
      :header-rows: 1
      :widths: 20 20 80
   
      * - Field
   
        - Type
   
        - Description
   
      * - ``capped``
   
        - boolean
   
        - Optional. To create a :term:`capped collection`,
          specify ``true``. If you specify ``true``, you must also set a maximum
          size in the ``size`` field.
          
          
   
      * - ``autoIndexId``
   
        - boolean
   
        - Optional. Specify ``false`` to disable the automatic creation of an index on the
          ``_id`` field.
          
          .. important::
          
             For replica sets, all collections must have ``autoIndexId`` set to ``true``.
          
          
   
      * - ``size``
   
        - number
   
        - Optional. Specify a maximum size in bytes for a capped collection. Once a
          capped collection reaches its maximum size, MongoDB removes the older
          documents to make space for the new documents. The ``size`` field is
          required for capped collections and ignored for other collections.
          
          
   
      * - ``max``
   
        - number
   
        - Optional. The maximum number of documents allowed in the capped collection. The
          ``size`` limit takes precedence over this limit. If a capped
          collection reaches the ``size`` limit before it reaches the maximum
          number of documents, MongoDB removes old documents. If you prefer to
          use the ``max`` limit, ensure that the ``size`` limit, which is
          required for a capped collection, is sufficient to contain the
          maximum number of documents.
          
          
   
      * - ``usePowerOf2Sizes``
   
        - boolean
   
        - Optional. Available for the MMAPv1 storage engine only.
          
          .. deprecated:: 3.0
          
             For the MMAPv1 storage engine, all collections use the :ref:`power
             of 2 sizes allocation <power-of-2-allocation>` unless the
             ``noPadding`` option is ``true``. The ``usePowerOf2Sizes`` option
             does not affect the allocation strategy.
          
          
   
      * - ``noPadding``
   
        - boolean
   
        - Optional. Available for the MMAPv1 storage engine only.
          
          .. versionadded:: 3.0
          
             ``noPadding`` flag disables the :ref:`power of 2 sizes allocation
             <power-of-2-allocation>` for the collection. With ``noPadding``
             flag set to true, the allocation strategy does not include
             additional space to accommodate document growth, as such, document
             growth will result in new allocation. Use for collections with
             workloads that are insert-only or in-place updates (such as
             incrementing counters).
          
             Defaults to ``false``.
          
          .. warning::
          
             Do not set ``noPadding`` if the workload includes removes or any
             updates that may cause documents to grow. For more information,
             see :ref:`exact-fit-allocation`.
          
          
   
      * - ``storageEngine``
   
        - document
   
        - Optional. Available for the WiredTiger storage engine only.
          
          .. versionadded:: 3.0
          
          Allows users to specify configuration to the storage engine on a
          per-collection basis when creating a collection. The value of the
          ``storageEngine`` option should take the following form:
          
          .. code-block:: javascript
          
             { <storage-engine-name>: <options> }
          
          Storage engine configuration specified when creating collections are
          validated and logged to the :term:`oplog` during replication to
          support replica sets with members that use different storage
          engines.
          
          
   


Examples
--------

Create a Capped Collection
~~~~~~~~~~~~~~~~~~~~~~~~~~

Capped collections
have maximum size or document counts that prevent them from growing
beyond maximum thresholds. All capped collections must specify a maximum
size and may also specify a maximum document count. MongoDB removes
older documents if a collection reaches the maximum size limit before it
reaches the maximum document count. Consider the following example:

.. code-block:: javascript

   db.createCollection("log", { capped : true, size : 5242880, max : 5000 } )

This command creates a collection named ``log`` with a maximum size of 5
megabytes and a maximum of 5000 documents.

See :doc:`/core/capped-collections` for more
information about capped collections.

.. _create-collection-storage-engine-options:

Specify Storage Engine Options
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. versionadded:: 3.0

You can specify collection-specific storage engine configuration
options when you create a collection with
:method:`db.createCollection()`. Consider the following operation:

.. code-block:: javascript

   db.createCollection( 
      "users", 
      { storageEngine: { wiredTiger: { configString: "<option>=<setting>" } } }
   )

This operation creates a new collection named ``users`` with a
specific configuration string that MongoDB will pass to the
``wiredTiger`` storage engine. See the `WiredTiger documentation of
collection level options <http://source.wiredtiger.com/2.4.1/struct_w_t___s_e_s_s_i_o_n.html#a358ca4141d59c345f401c58501276bbb>`_
for specific ``wiredTiger`` options.
