============
db.addUser()
============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. deprecated:: 2.6
   Use :method:`db.createUser()` and :method:`db.updateUser()` instead
   of :method:`db.addUser()` to add users to MongoDB.

In 2.6, MongoDB introduced a new model for user
credentials and privileges, as described in
:doc:`/core/security-introduction`. To use :method:`db.addUser()` on MongoDB
2.4, see :v2.4:`db.addUser() in the version 2.4 of the MongoDB Manual
</reference/method/db.addUser>`.

Definition
----------

.. method:: db.addUser(document)

   Adds a new user on the database where you run the method. The
   :method:`db.addUser()` method takes a user document as its
   argument:

   .. code-block:: javascript

      db.addUser(<user document>)

   Specify a document that resembles the following as an argument to
   :method:`db.addUser()`:

   .. code-block:: javascript

      { user: "<name>",
        pwd: "<cleartext password>",
        customData: { <any information> },
        roles: [
          { role: "<role>", db: "<database>" } | "<role>",
          ...
        ],
        writeConcern: { <write concern> }
      }

   The :method:`db.addUser()` user document has the following fields:


   .. list-table::
      :header-rows: 1
      :widths: 20 20 80
   
      * - Field
   
        - Type
   
        - Description
   
      * - ``pwd``
   
        - string
   
        - The user's password. The ``pwd`` field is not
          required if you run |local-cmd-name| on the ``$external``
          database to create users who have credentials stored externally to
          MongoDB.
          
          
   
      * - ``customData``
   
        - document
   
        - Optional. Any arbitrary information.  This field can be used to store any data
          an admin wishes to associate with this particular user.  For example,
          this could be the user's full name or employee id.
          
          
   
      * - ``roles``
   
        - array
   
        - The roles granted to the user. Can specify an empty array ``[]`` to
          create users without roles.
          
          
   
      * - ``writeConcern``
   
        - document
   
        - Optional. The level of :doc:`write concern </reference/write-concern>` for the
          creation operation. The ``writeConcern`` document takes the same
          fields as the :dbcommand:`getLastError` command.
          
          
   
      * - ``user``
   
        - string
   
        - The name of the new user.
          
          
   


   Users created on the ``$external`` database should have credentials
   stored externally to MongoDB, as, for example, with :doc:`MongoDB
   Enterprise installations that use Kerberos
   </tutorial/control-access-to-mongodb-with-kerberos-authentication>`.

   .. |local-cmd-name| replace:: :method:`db.addUser()`
   .. include:: /includes/fact-roles-array-contents.rst

Considerations
--------------

The :method:`db.addUser()` method returns a *duplicate user* error if
the user exists.

When interacting with 2.6 and later MongoDB instances,
:method:`db.addUser()` sends unencrypted passwords. To encrypt
the password in transit use :doc:`SSL </tutorial/configure-ssl>`.

In the 2.6 version of the shell, :method:`db.addUser()` is backwards
compatible with both the :v2.4:`2.4 version of db.addUser()
</reference/method/db.addUser>` and the :v2.2:`2.2 version of db.addUser()
</reference/method/db.addUser>`. In 2.6, for backwards compatibility
:method:`db.addUser()` creates users that approximate the privileges
available in previous versions of MongoDB.

Example
-------

The following :method:`db.addUser()` method creates a user ``Carlos`` on the
database where the command runs. The command gives ``Carlos`` the
``clusterAdmin`` and ``readAnyDatabase`` roles on the ``admin`` database
and the ``readWrite`` role on the current database:

.. code-block:: javascript

   { user: "Carlos",
     pwd: "cleartext password",
     customData: { employeeId: 12345 },
     roles: [
       { role: "clusterAdmin", db: "admin" },
       { role: "readAnyDatabase", db: "admin" },
       "readWrite"
     ],
     writeConcern: { w: "majority" , wtimeout: 5000 }
   }
