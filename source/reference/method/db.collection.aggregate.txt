=========================
db.collection.aggregate()
=========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. method:: db.collection.aggregate(pipeline)

   .. versionadded:: 2.2

   Calculates aggregate values for the data in a collection.
   Always call the :method:`~db.collection.aggregate()` method on a collection
   object.


   .. list-table::
      :header-rows: 1
      :widths: 20 20 80
   
      * - Parameter
   
        - Type
   
        - Description
   
      * - ``pipeline``
   
        - document
   
        - A sequence of data aggregation processes. See the :doc:`aggregation
          reference </reference/aggregation>` for documentation of these
          operators.
          
          
   


   :returns: A document with two fields:

             - ``result`` which holds an array of documents returned by
               the :term:`pipeline`

             - ``ok`` which holds the value ``1``, indicating success.

   :throws exception:
           .. include:: /includes/fact-agg-helper-exception.rst

Example
-------

Consider a collection named ``articles`` that contains documents of the
following format:

.. code-block:: javascript

   {
     title : "this is my title" ,
     author : "bob" ,
     posted : new Date () ,
     pageViews : 5 ,
     tags : [ "fun" , "good" , "sport" ] ,
     comments : [
                  { author :"joe" , text : "this is cool" } ,
                  { author :"sam" , text : "this is bad" }
     ],
     other : { foo : 5 }
   }

The following aggregation pivots the data to group authors by
individual tags:

.. code-block:: javascript

   db.articles.aggregate(
     { $project : {
                    author : 1,
                    tags : 1,
                  }
     },
     { $unwind : "$tags" },
     { $group : {
                  _id : { tags : "$tags" },
                  authors : { $addToSet : "$author" }
                }
     }
   )

The aggregation pipeline begins with the collection ``articles`` and
selects the ``author`` and ``tags`` fields using the
:pipeline:`$project` pipeline operator. The :pipeline:`$unwind`
operator produces one output document per tag. Finally, the
:pipeline:`$group` pipeline operator groups authors by tags.

The operation returns the following document:

.. code-block:: javascript

   {
      "result" : [
                   {
                     "_id" : { "tags" : "good" },
                     "authors" : [ "bob", "mike", ... ]
                   },
                   {
                     "_id" : { "tags" : "fun" },
                     "authors" : [ "bob", "al" ]
                   },

                   ...

                 ],
      "ok" : 1
   }

The returned document contains two fields:

- ``result`` field, which holds an array of documents returned by
  the :ref:`pipeline <aggregation-pipeline>`, and

- ``ok`` field, which holds the value ``1``, indicating success.

For more information, see :doc:`/core/aggregation`,
:doc:`/reference/aggregation`, and :dbcommand:`aggregate`.
