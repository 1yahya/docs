.. _mongoexport:

===============
``mongoexport``
===============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol
.. |tool-binary| replace:: mongoexport

.. include:: /includes/admonition-mac-osx-sierra-restriction.rst

Synopsis
--------

:binary:`~bin.mongoexport` is a utility that produces a JSON or CSV export
of data stored in a MongoDB instance. See
:ref:`human-intelligible-exports` for a more in-depth
usage overview, and the :doc:`mongoimport` document for more
information regarding the :binary:`~bin.mongoimport` utility, which
provides the inverse "importing" capability.

Considerations
--------------

.. include:: /includes/fact-type-fidelity-loss.rst

.. include:: /includes/fact-type-fidelity-loss-example.rst

Required Access
---------------

In order to connect to a :binary:`~bin.mongod` that enforces authorization
with the :option:`--auth <mongod --auth>` option, you must use the
:option:`--username <mongoexport --username>` and :option:`--password
<mongoexport --password>` options. The connecting user must possess at a
minimum, the :authrole:`read` role on the database that they are exporting.

Options
-------

.. include:: /includes/extracts/fact-3.0-tools-drop-dbpath-support-mongoexport.rst

.. include:: /includes/fact-3.0-mongoexport-drop-csv-option.rst

.. binary:: mongoexport

.. program:: mongoexport

.. option:: --help

   Returns information on the options and use of :program:`mongoexport`.


.. option:: --verbose, -v

   Increases the amount of internal reporting returned on standard output
   or in log files. Increase the verbosity with the ``-v`` form by
   including the option multiple times, (e.g. ``-vvvvv``.)
   


.. option:: --quiet

   Runs the :program:`mongoexport` in a quiet mode that attempts to limit the amount
   of output.

   This option suppresses:
   
   - output from :term:`database commands <database command>`
   
   - replication activity
   
   - connection accepted events
   
   - connection closed events


.. option:: --version

   Returns the :program:`mongoexport` release number.


.. option:: --host <hostname><:port>, -h <hostname><:port>

   *Default*: localhost:27017

   Specifies a resolvable hostname for the :binary:`~bin.mongod` to which to
   connect. By default, the :program:`mongoexport` attempts to connect to a MongoDB
   instance running on the localhost on port number ``27017``.
   
   To connect to a replica set, specify the
   :setting:`~replication.replSetName` and a seed list of set members, as in
   the following:
   
   .. code-block:: none
   
      <replSetName>/<hostname1><:port>,<hostname2><:port>,<...>
   
   You can always connect directly to a single MongoDB instance by
   specifying the host and port number directly.
   
   .. versionchanged:: 3.0.0
      If you use IPv6 and use the ``<address>:<port>`` format, you must
      enclose the portion of an address and port combination in
      brackets (e.g. ``[<address>]``).


.. option:: --port <port>

   *Default*: 27017

   Specifies the TCP port on which the MongoDB instance listens for
   client connections.


.. option:: --ipv6

   Enables IPv6 support and allows the :program:`mongoexport` to connect to the
   MongoDB instance using an IPv6 network. All MongoDB programs and
   processes disable IPv6 support by default.


.. option:: --ssl

   .. versionadded:: 2.6
   
   Enables connection to a :binary:`~bin.mongod` or :binary:`~bin.mongos` that has
   TLS/SSL support enabled.
   
   .. include:: /includes/fact-ssl-supported.rst
   


.. option:: --sslCAFile <filename>

   .. versionadded:: 2.6
   
   Specifies the :file:`.pem` file that contains the root certificate chain
   from the Certificate Authority. Specify the file name of the
   :file:`.pem` file using relative or absolute paths.
   
   .. include:: /includes/fact-ssl-supported.rst
   
   .. warning::
   
      For SSL connections (``--ssl``) to :binary:`~bin.mongod` and
      :binary:`~bin.mongos`, if the :program:`mongoexport` runs without the
      :option:`--sslCAFile`, :program:`mongoexport` will not attempt
      to validate the server certificates. This creates a vulnerability
      to expired :binary:`~bin.mongod` and :binary:`~bin.mongos` certificates as
      well as to foreign processes posing as valid :binary:`~bin.mongod` or
      :binary:`~bin.mongos` instances. Ensure that you *always* specify the
      CA file to validate the server certificates in cases where
      intrusion is a possibility.


.. option:: --sslPEMKeyFile <filename>

   .. versionadded:: 2.6
   
   Specifies the :file:`.pem` file that contains both the TLS/SSL certificate
   and key. Specify the file name of the :file:`.pem` file using relative
   or absolute paths.
   
   This option is required when using the :option:`--ssl` option to connect
   to a :binary:`~bin.mongod` or :binary:`~bin.mongos` that has
   :setting:`~net.ssl.CAFile` enabled *without*
   :setting:`~net.ssl.allowConnectionsWithoutCertificates`.
   
   .. include:: /includes/fact-ssl-supported.rst
   


.. option:: --sslPEMKeyPassword <value>

   .. versionadded:: 2.6
   
   Specifies the password to de-crypt the certificate-key file (i.e.
   :option:`--sslPEMKeyFile`). Use the :option:`--sslPEMKeyPassword` option only if the
   certificate-key file is encrypted. In all cases, the :program:`mongoexport` will
   redact the password from all logging and reporting output.
   
   If the private key in the PEM file is encrypted and you do not specify
   the :option:`--sslPEMKeyPassword` option, the :program:`mongoexport` will prompt for a passphrase. See
   :ref:`ssl-certificate-password`.
   
   .. include:: /includes/fact-ssl-supported.rst


.. option:: --sslCRLFile <filename>

   .. versionadded:: 2.6
   
   Specifies the :file:`.pem` file that contains the Certificate Revocation
   List. Specify the file name of the :file:`.pem` file using relative or
   absolute paths.
   
   .. include:: /includes/fact-ssl-supported.rst
   


.. option:: --sslAllowInvalidCertificates

   .. versionadded:: 2.6
   
   Bypasses the validation checks for server certificates and allows
   the use of invalid certificates. When using the
   :setting:`~net.ssl.allowInvalidCertificates` setting, MongoDB logs as a
   warning the use of the invalid certificate.
   
   .. include:: /includes/fact-ssl-supported.rst
   


.. option:: --sslAllowInvalidHostnames

   .. versionadded:: 3.0
   
   Disables the validation of the hostnames in TLS/SSL certificates. Allows
   :program:`mongoexport` to connect to MongoDB instances even if the hostname in their
   certificates do not match the specified hostname.
   
   .. include:: /includes/fact-ssl-supported.rst


.. option:: --sslFIPSMode

   .. versionadded:: 2.6
   
   Directs the :program:`mongoexport` to use the FIPS mode of the installed OpenSSL
   library. Your system must have a FIPS compliant OpenSSL library to use
   the :option:`--sslFIPSMode` option.
   
   .. include:: /includes/note-fips-is-enterprise-only.rst


.. option:: --username <username>, -u <username>

   Specifies a username with which to authenticate to a MongoDB database
   that uses authentication. Use in conjunction with the ``--password`` and
   ``--authenticationDatabase`` options.
   


.. option:: --password <password>, -p <password>

   Specifies a password with which to authenticate to a MongoDB database
   that uses authentication. Use in conjunction with the ``--username`` and
   ``--authenticationDatabase`` options.
   
   .. versionchanged:: 3.0.0
   
      If you do not specify an argument for :option:`--password`, :program:`mongoexport` returns
      an error.
   
   .. versionchanged:: 3.0.2
   
      If you wish :program:`mongoexport` to prompt the user
      for the password, pass the :option:`--username` option without
      :option:`--password` or specify an empty string as the :option:`--password` value,
      as in ``--password ""`` .
     


.. option:: --authenticationDatabase <dbname>

   If you do not specify an authentication database, :program:`mongoexport`
   assumes that the database specified to export holds the user's credentials.


.. option:: --authenticationMechanism <name>

   *Default*: SCRAM-SHA-1

   .. versionadded:: 2.4
   
   .. versionchanged:: 2.6
      Added support for the ``PLAIN`` and ``MONGODB-X509`` authentication
      mechanisms.
   
   .. versionchanged:: 3.0
      Added support for the ``SCRAM-SHA-1`` authentication mechanism. Changed
      default mechanism to ``SCRAM-SHA-1``.
   
   Specifies the authentication mechanism the :program:`mongoexport` instance uses to
   authenticate to the :binary:`~bin.mongod` or :binary:`~bin.mongos`.
   
   .. list-table::
      :header-rows: 1
      :widths: 20 40
   
      * - Value
   
        - Description
   
      * - :ref:`SCRAM-SHA-1 <authentication-scram-sha-1>`
   
        - `RFC 5802 <https://tools.ietf.org/html/rfc5802>`_ standard
          Salted Challenge Response Authentication Mechanism using the SHA1
          hash function.
   
      * - :ref:`MONGODB-CR <authentication-mongodb-cr>`
   
        - MongoDB challenge/response authentication.
   
      * - :ref:`MONGODB-X509 <security-auth-x509>`
   
        - MongoDB TLS/SSL certificate authentication.
   
      * - :ref:`GSSAPI <security-auth-kerberos>` (Kerberos)
   
        - External authentication using Kerberos. This mechanism is
          available only in `MongoDB Enterprise
          <http://www.mongodb.com/products/mongodb-enterprise?jmp=docs>`_.
   
      * - :ref:`PLAIN <security-auth-ldap>` (LDAP SASL)
   
        - External authentication using LDAP. You can also use ``PLAIN``
          for authenticating in-database users. ``PLAIN`` transmits
          passwords in plain text. This mechanism is available only in
          `MongoDB Enterprise
          <http://www.mongodb.com/products/mongodb-enterprise?jmp=docs>`_.


.. option:: --gssapiServiceName

   .. versionadded:: 2.6
   
   Specify the name of the service using :doc:`GSSAPI/Kerberos
   </core/kerberos>`. Only required if the service does not use the
   default name of ``mongodb``.
   
   This option is available only in MongoDB Enterprise.
   


.. option:: --gssapiHostName

   .. versionadded:: 2.6
   
   Specify the hostname of a service using :doc:`GSSAPI/Kerberos
   </core/kerberos>`. *Only* required if the hostname of a machine does
   not match the hostname resolved by DNS.
   
   This option is available only in MongoDB Enterprise.
   


.. option:: --db <database>, -d <database>

   Specifies the name of the database on which to run the :program:`mongoexport`.


.. option:: --collection <collection>, -c <collection>

   Specifies the collection to export.
   


.. option:: --fields <field1[,field2]>, -f <field1[,field2]>

   Specifies a field or fields to *include* in the export. Use a comma
   separated list of fields to specify multiple fields.
   
   For :option:`csv <mongoexport --type>` output formats,
   :binary:`~bin.mongoexport` includes only the specified field(s), and the
   specified field(s) can be a field within a sub-document.
   
   For :term:`JSON` output formats, :binary:`~bin.mongoexport` includes
   only the specified field(s) **and** the ``_id`` field, and if the
   specified field(s) is a field within a sub-document, the
   :binary:`~bin.mongoexport` includes the sub-document with all
   its fields, not just the specified field within the document.
   


.. option:: --fieldFile <filename>

   An alternative to :option:`--fields <mongoexport --fields>`. The
   :option:`--fieldFile` option allows you to
   specify in a file the field or fields to *include* in the export and is
   **only valid** with the :option:`--type <mongoexport --type>` option
   with value ``csv``. The
   file must have only one field per line, and the line(s) must end with
   the LF character (``0x0A``).
   
   :binary:`~bin.mongoexport` includes only the specified field(s). The
   specified field(s) can be a field within a sub-document.


.. option:: --query <JSON>, -q <JSON>

   Provides a :term:`JSON document` as a query that optionally limits
   the documents returned in the export. Specify JSON in :doc:`strict
   format </reference/mongodb-extended-json>`.
   
   .. include:: /includes/fact-quote-command-line-query.rst
   
   For example, given a collection named ``records`` in the database
   ``test`` with the following documents:
   
   .. code:: json
   
      { "_id" : ObjectId("51f0188846a64a1ed98fde7c"), "a" : 1 }
      { "_id" : ObjectId("520e61b0c6646578e3661b59"), "a" : 1, "b" : 2 }
      { "_id" : ObjectId("520e642bb7fa4ea22d6b1871"), "a" : 2, "b" : 3, "c" : 5 }
      { "_id" : ObjectId("520e6431b7fa4ea22d6b1872"), "a" : 3, "b" : 3, "c" : 6 }
      { "_id" : ObjectId("520e6445b7fa4ea22d6b1873"), "a" : 5, "b" : 6, "c" : 8 }
   
   The following :binary:`~bin.mongoexport` uses the :option:`-q` option to
   export only the documents with the field ``a`` greater than or equal to
   (:query:`$gte`) to ``3``:
   
   .. code:: bash
   
      mongoexport -d test -c records -q '{ a: { $gte: 3 } }' --out exportdir/myRecords.json
   
   The resulting file contains the following documents:
   
   .. code:: json
   
      { "_id" : { "$oid" : "520e6431b7fa4ea22d6b1872" }, "a" : 3, "b" : 3, "c" : 6 }
      { "_id" : { "$oid" : "520e6445b7fa4ea22d6b1873" }, "a" : 5, "b" : 6, "c" : 8 }
   
   You can sort the results with the :option:`--sort` option to
   :binary:`~bin.mongoexport`.
   


.. option:: --type <string>

   *Default*: json

   
   .. versionadded:: 3.0.0
   
   Specifies the file type to export. Specify ``csv`` for :term:`CSV`
   format or ``json`` for :term:`JSON` format.
   
   If you specify ``csv``, then you must also use either
   the :option:`--fields` or the :option:`--fieldFile` option to
   declare the fields to export from the collection.
   


.. option:: --out <file>, -o <file>

   Specifies a file to write the export to. If you do not specify a file
   name, the :binary:`~bin.mongoexport` writes data to standard output
   (e.g. ``stdout``).
   


.. option:: --jsonArray

   Modifies the output of :binary:`~bin.mongoexport` to write the
   entire contents of the export as a single :term:`JSON` array. By
   default :binary:`~bin.mongoexport` writes data using one JSON document
   for every MongoDB document.
   


.. option:: --pretty

   
   .. versionadded:: 3.0.0
   
   Outputs documents in a pretty-printed format JSON.
   


.. option:: --slaveOk, -k

   Allows :binary:`~bin.mongoexport` to read data from secondary or slave
   nodes when using :binary:`~bin.mongoexport` with a replica set. This
   option is only available if connected to a :binary:`~bin.mongod` or
   :binary:`~bin.mongos`.
   
   This is the default behavior.
   


.. option:: --forceTableScan

   
   Forces :binary:`~bin.mongoexport` to scan the data store directly instead
   of traversing the ``_id`` field index. Use :option:`--forceTableScan` to skip the
   index. Typically there are two cases where this behavior is
   preferable to the default:
   
   1. If you have key sizes over 800 bytes that would not be present
      in the ``_id`` index.
   
   2. Your database uses a custom ``_id`` field.
   
   When you run with :option:`--forceTableScan`, :binary:`~bin.mongoexport` may return a
   document more than once if a write operation interleaves with the
   operation to cause the document to move.
   
   .. warning:: Use :option:`--forceTableScan` with extreme caution
      and consideration.


.. option:: --skip <number>

   Use :option:`--skip` to control where :binary:`~bin.mongoexport` begins
   exporting documents. See :method:`~cursor.skip()` for information about
   the underlying operation.


.. option:: --limit <number>

   Specifies a maximum number of documents to include in the
   export. See :method:`~cursor.limit()` for information about
   the underlying operation.
   


.. option:: --sort <JSON>

   Specifies an ordering for exported results. If an index does
   **not** exist that can support the sort operation, the results must
   be *less than* 32 megabytes.
   
   Use :option:`--sort` conjunction with :option:`--skip` and
   :option:`--limit` to limit number of exported documents.
   
   .. code-block:: sh
   
      mongoexport -d test -c records --sort '{a: 1}' --limit 100 --out export.0.json
      mongoexport -d test -c records --sort '{a: 1}' --limit 100 --skip 100 --out export.1.json
      mongoexport -d test -c records --sort '{a: 1}' --limit 100 --skip 200 --out export.2.json
   
   See :method:`~cursor.sort()` for information about the underlying
   operation.


Use
---

.. include:: /includes/fact-mongoexport-usage.rst
