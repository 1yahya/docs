.. _mongoexport:

===============
``mongoexport``
===============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol
.. |tool-binary| replace:: mongoexport

Synopsis
--------

:binary:`~bin.mongoexport` is a utility that produces a JSON or CSV export
of data stored in a MongoDB instance. See the
:doc:`/core/import-export` document for a more in depth
usage overview, and the :doc:`mongoimport` document for more
information regarding the :binary:`~bin.mongoimport` utility, which
provides the inverse "importing" capability.

Considerations
--------------

Do not use :binary:`~bin.mongoimport` and :binary:`~bin.mongoexport` for
full-scale production backups because they may not reliably capture
data type information. Use :binary:`~bin.mongodump` and
:binary:`~bin.mongorestore` as described in :doc:`/core/backups` for this
kind of functionality.

Options
-------

.. binary:: mongoexport

.. program:: mongoexport

.. option:: --help

   Returns information on the options and use of :program:`mongoexport`.


.. option:: --verbose, -v

   Increases the amount of internal reporting returned on standard output
   or in log files. Increase the verbosity with the ``-v`` form by
   including the option multiple times, (e.g. ``-vvvvv``.)
   


.. option:: --quiet

   Runs the :program:`mongoexport` in a quiet mode that attempts to limit the amount
   of output.

   This option suppresses:
   
   - output from :term:`database commands <database command>`
   
   - replication activity
   
   - connection accepted events
   
   - connection closed events
   


.. option:: --version

   Returns the :program:`mongoexport` release number.


.. option:: --host <hostname><:port>, -h <hostname><:port>

   *Default*: localhost:27017

   Specifies a resolvable hostname for the :binary:`~bin.mongod` to which to
   connect. By default, the :program:`mongoexport` attempts to connect to a MongoDB
   instance running on the localhost on port number ``27017``.
   
   To connect to a replica set, specify the :setting:`replica set name
   <~replication.replSetName>` and a seed list of set members. Use the
   following form:
   
   .. code-block:: none
   
      <replSetName>/<hostname1><:port>,<hostname2><:port>,<...>
   
   You can always connect directly to a single MongoDB instance by
   specifying the host and port number directly.


.. option:: --port <port>

   *Default*: 27017

   Specifies the TCP port on which the MongoDB instance listens for
   client connections.
   


.. option:: --ipv6

   Enables IPv6 support and allows the :program:`mongoexport` to connect to the
   MongoDB instance using an IPv6 network. All MongoDB programs and
   processes disable IPv6 support by default.


.. option:: --ssl

   .. versionadded:: 2.6
   
   Enables connection to a :binary:`~bin.mongod` or :binary:`~bin.mongos` that has
   TLS/SSL support enabled.
   
   The default distribution of MongoDB does not contain support for TLS/SSL.
   For more information on MongoDB and TLS/SSL, see :doc:`/tutorial/configure-ssl`.
   


.. option:: --sslCAFile <filename>

   .. versionadded:: 2.6
   
   Specifies the :file:`.pem` file that contains the root certificate chain
   from the Certificate Authority. Specify the file name of the
   :file:`.pem` file using relative or absolute paths.
   
   The default distribution of MongoDB does not contain support for
   TLS/SSL. For more information on MongoDB and TLS/SSL, see
   :doc:`/tutorial/configure-ssl`.
   
   .. include:: /includes/warning-always-use-sslCAFile-for-mongo.rst
   


.. option:: --sslPEMKeyFile <filename>

   .. versionadded:: 2.6
   
   Specifies the :file:`.pem` file that contains both the TLS/SSL certificate
   and key. Specify the file name of the :file:`.pem` file using relative
   or absolute paths.
   
   This option is required when using the :option:`--ssl` option to connect
   to a :binary:`~bin.mongod` or :binary:`~bin.mongos` that has
   :setting:`~net.ssl.CAFile` enabled *without*
   :setting:`~net.ssl.weakCertificateValidation`.
   
   The default distribution of MongoDB does not contain support for TLS/SSL.
   For more information on MongoDB and TLS/SSL, see :doc:`/tutorial/configure-ssl`.
   


.. option:: --sslPEMKeyPassword <value>

   .. versionadded:: 2.6
   
   Specifies the password to de-crypt the certificate-key file (i.e.
   :option:`--sslPEMKeyFile`). Use the :option:`--sslPEMKeyPassword` option only if the
   certificate-key file is encrypted. In all cases, the :program:`mongoexport` will
   redact the password from all logging and reporting output.
   
   If the private key in the PEM file is encrypted and you do not specify
   the :option:`--sslPEMKeyPassword` option, the :program:`mongoexport` will prompt for a passphrase. See
   :ref:`ssl-certificate-password`.
   
   The default distribution of MongoDB does not contain support for TLS/SSL.
   For more information on MongoDB and TLS/SSL, see :doc:`/tutorial/configure-ssl`.


.. option:: --sslCRLFile <filename>

   .. versionadded:: 2.6
   
   Specifies the :file:`.pem` file that contains the Certificate Revocation
   List. Specify the file name of the :file:`.pem` file using relative or
   absolute paths.
   
   The default distribution of MongoDB does not contain support for TLS/SSL.
   For more information on MongoDB and TLS/SSL, see :doc:`/tutorial/configure-ssl`.
   


.. option:: --sslAllowInvalidCertificates

   .. versionadded:: 2.6
   
   Bypasses the validation checks for server certificates and allows
   the use of invalid certificates. When using the
   :setting:`~net.ssl.allowInvalidCertificates` setting, MongoDB logs as a
   warning the use of the invalid certificate.
   
   The default distribution of MongoDB does not contain support for TLS/SSL.
   For more information on MongoDB and TLS/SSL, see :doc:`/tutorial/configure-ssl`.
   


.. option:: --sslFIPSMode

   .. versionadded:: 2.6
   
   Directs the :program:`mongoexport` to use the FIPS mode of the installed OpenSSL
   library. Your system must have a FIPS compliant OpenSSL library to use
   the :option:`--sslFIPSMode` option.
   
   The default distribution of MongoDB does not contain support for TLS/SSL.
   For more information on MongoDB and TLS/SSL, see :doc:`/tutorial/configure-ssl`.


.. option:: --username <username>, -u <username>

   Specifies a username with which to authenticate to a MongoDB database
   that uses authentication. Use in conjunction with the ``--password`` and
   ``--authenticationDatabase`` options.
   


.. option:: --password <password>, -p <password>

   Specifies a password with which to authenticate to a MongoDB database
   that uses authentication. Use in conjunction with the ``--username`` and
   ``--authenticationDatabase`` options.
   
   If you do not specify an argument for :option:`--password`, :program:`mongoexport` will
   prompt interactively for a password on the console.


.. option:: --authenticationDatabase <dbname>

   If you do not specify an authentication database, :program:`mongoexport`
   assumes that the database specified to export holds the user's credentials.


.. option:: --authenticationMechanism <name>

   *Default*: MONGODB-CR

   .. versionadded:: 2.4
   
   .. versionchanged:: 2.6
      Added support for the ``PLAIN`` and ``MONGODB-X509`` authentication
      mechanisms.
   
   Specifies the authentication mechanism the :program:`mongoexport` instance uses to
   authenticate to the :binary:`~bin.mongod` or :binary:`~bin.mongos`.
   
   .. list-table::
      :header-rows: 1
      :widths: 20 40
   
      * - Value
   
        - Description
   
      * - MONGODB-CR
   
        - MongoDB challenge/response authentication.
   
      * - MONGODB-X509
   
        - MongoDB TLS/SSL certificate authentication.
   
      * - PLAIN
   
        - External authentication using LDAP. You can also use ``PLAIN``
          for authenticating in-database users. ``PLAIN`` transmits
          passwords in plain text. This mechanism is available only in
          `MongoDB Enterprise
          <http://www.mongodb.com/products/mongodb-enterprise>`_.
   
      * - GSSAPI
   
        - External authentication using Kerberos. This mechanism is
          available only in `MongoDB Enterprise
          <http://www.mongodb.com/products/mongodb-enterprise>`_.


.. option:: --gssapiServiceName

   .. versionadded:: 2.6
   
   Specify the name of the service using :doc:`GSSAPI/Kerberos
   </core/kerberos>`. Only required if the service does not use the
   default name of ``mongodb``.
   
   This option is available only in MongoDB Enterprise.
   


.. option:: --gssapiHostName

   .. versionadded:: 2.6
   
   Specify the hostname of a service using :doc:`GSSAPI/Kerberos
   </core/kerberos>`. *Only* required if the hostname of a machine does
   not match the hostname resolved by DNS.
   
   This option is available only in MongoDB Enterprise.
   


.. option:: --dbpath <path>

   Specifies the directory of the MongoDB data files. The :option:`--dbpath` option
   lets the :program:`mongoexport` attach directly to the local data files without
   going through a running :binary:`~bin.mongod`. When run with :option:`--dbpath`, the
   :program:`mongoexport` locks access to the data files. No :binary:`~bin.mongod` can
   access the files while the :program:`mongoexport` process runs.


.. option:: --directoryperdb

   When used in conjunction with the corresponding option in
   :binary:`~bin.mongod`, allows :binary:`~bin.mongoexport` to export data from
   MongoDB instances that have every database's files saved in discrete
   directories on the disk. This option is only relevant when specifying
   the :option:`--dbpath` option.
   


.. option:: --journal

   Enables the durability :term:`journal` to ensure data files remain valid
   and recoverable. This option applies only when you specify the
   . The :program:`mongoexport` enables journaling by default
   on 64-bit builds of versions after 2.0.


.. option:: --db <database>, -d <database>

   Specifies the name of the database on which to run the :program:`mongoexport`.


.. option:: --collection <collection>, -c <collection>

   Specifies the collection to export.
   


.. option:: --fields <field1[,field2]>, -f <field1[,field2]>

   Specifies a field or fields to *include* in the export. Use a comma
   separated list of fields to specify multiple fields.
   
   For :option:`--csv <mongoexport --csv>` output formats,
   :binary:`~bin.mongoexport` includes only the specified field(s), and the
   specified field(s) can be a field within a sub-document.
   
   For :term:`JSON` output formats, :binary:`~bin.mongoexport` includes
   only the specified field(s) **and** the ``_id`` field, and if the
   specified field(s) is a field within a sub-document, the
   :binary:`~bin.mongoexport` includes the sub-document with all
   its fields, not just the specified field within the document.
   


.. option:: --fieldFile <filename>

   An alternative to :option:`--fields <mongoexport --fields>`. The
   :option:`--fieldFile` option allows you to
   specify in a file the field or fields to *include* in the export and is
   **only valid** with the :option:`--csv <mongoexport --csv>` option. The
   file must have only one field per line, and the line(s) must end with
   the LF character (``0x0A``).
   
   :binary:`~bin.mongoexport` includes only the specified field(s). The
   specified field(s) can be a field within a sub-document.


.. option:: --query <JSON>, -q <JSON>

   Provides a :term:`JSON document` as a query that optionally limits
   the documents returned in the export. Specify JSON in :doc:`strict
   format </reference/mongodb-extended-json>`.
   
   For example, given a collection named ``records`` in the database
   ``test`` with the following documents:
   
   .. code:: json
   
      { "_id" : ObjectId("51f0188846a64a1ed98fde7c"), "a" : 1 }
      { "_id" : ObjectId("520e61b0c6646578e3661b59"), "a" : 1, "b" : 2 }
      { "_id" : ObjectId("520e642bb7fa4ea22d6b1871"), "a" : 2, "b" : 3, "c" : 5 }
      { "_id" : ObjectId("520e6431b7fa4ea22d6b1872"), "a" : 3, "b" : 3, "c" : 6 }
      { "_id" : ObjectId("520e6445b7fa4ea22d6b1873"), "a" : 5, "b" : 6, "c" : 8 }
   
   The following :binary:`~bin.mongoexport` uses the :option:`-q` option to
   export only the documents with the field ``a`` greater than or equal to
   (:query:`$gte`) to ``3``:
   
   .. code:: bash
   
      mongoexport -d test -c records -q "{ a: { \$gte: 3 } }" --out exportdir/myRecords.json
   
   The resulting file contains the following documents:
   
   .. code:: json
   
      { "_id" : { "$oid" : "520e6431b7fa4ea22d6b1872" }, "a" : 3, "b" : 3, "c" : 6 }
      { "_id" : { "$oid" : "520e6445b7fa4ea22d6b1873" }, "a" : 5, "b" : 6, "c" : 8 }
   
   You can sort the results with the :option:`--sort` option to
   :binary:`~bin.mongoexport`.
   


.. option:: --csv

   Changes the export format to a comma-separated-values (CSV)
   format. By default :binary:`~bin.mongoexport` writes data using one
   :term:`JSON` document for every MongoDB document.
   
   If you specify :option:`--csv`, then you must also use either
   the :option:`--fields` or the :option:`--fieldFile` option to
   declare the fields to export from the collection.


.. option:: --out <file>, -o <file>

   Specifies a file to write the export to. If you do not specify a file
   name, the :binary:`~bin.mongoexport` writes data to standard output
   (e.g. ``stdout``).
   


.. option:: --jsonArray

   Modifies the output of :binary:`~bin.mongoexport` to write the
   entire contents of the export as a single :term:`JSON` array. By
   default :binary:`~bin.mongoexport` writes data using one JSON document
   for every MongoDB document.
   


.. option:: --slaveOk, -k

   Allows :binary:`~bin.mongoexport` to read data from secondary or slave
   nodes when using :binary:`~bin.mongoexport` with a replica set. This
   option is only available if connected to a :binary:`~bin.mongod` or
   :binary:`~bin.mongos` and is not available when used with the
   ":option:`mongoexport --dbpath`" option.
   
   This is the default behavior.
   


.. option:: --forceTableScan

   .. versionadded:: 2.2
   
   Forces :binary:`~bin.mongoexport` to scan the data store directly instead
   of traversing the ``_id`` field index. Use :option:`--forceTableScan` to skip the
   index. Typically there are two cases where this behavior is
   preferable to the default:
   
   1. If you have key sizes over 800 bytes that would not be present
      in the ``_id`` index.
   
   2. Your database uses a custom ``_id`` field.
   
   When you run with :option:`--forceTableScan`, :binary:`~bin.mongoexport` may return a
   document more than once if a write operation interleaves with the
   operation to cause the document to move.
   
   .. warning:: Use :option:`--forceTableScan` with extreme caution
      and consideration.


.. option:: --skip <number>

   Use :option:`--skip` to control where :binary:`~bin.mongoexport` begins
   exporting documents. See :method:`~cursor.skip()` for information about
   the underlying operation.


.. option:: --limit <number>

   Specifies a maximum number of documents to include in the
   export. See :method:`~cursor.limit()` for information about
   the underlying operation.
   


.. option:: --sort <JSON>

   Specifies an ordering for exported results. If an index does
   **not** exist that can support the sort operation, the results must
   be *less than* 32 megabytes.
   
   Use :option:`--sort` conjunction with :option:`--skip` and
   :option:`--limit` to limit number of exported documents.
   
   .. code-block:: sh
   
      mongoexport -d test -c records --sort '{a: 1}' --limit 100 --out export.0.json
      mongoexport -d test -c records --sort '{a: 1}' --limit 100 --skip 100 --out export.1.json
      mongoexport -d test -c records --sort '{a: 1}' --limit 100 --skip 200 --out export.2.json
   
   See :method:`~cursor.sort()` for information about the underlying
   operation.


Use
---

Export in CSV Format
~~~~~~~~~~~~~~~~~~~~

In the following example, :binary:`~bin.mongoexport` exports data from the
collection ``contacts`` in the ``users`` database in :term:`CSV` format
to the file ``/opt/backups/contacts.csv``. The :binary:`~bin.mongod`
instance that :binary:`~bin.mongoexport` connects to is running on the
localhost port number ``27017``.

To export in CSV format, you must specify the fields in the documents
to export. The operation specifies the ``name`` and ``address`` fields
to export.

.. code-block:: sh

   mongoexport --db users --collection contacts --csv --fields name,address --out /opt/backups/contacts.csv

For CSV exports only, you can also specify the fields in a file
containing the line-separated list of fields to export. The file must
have only one field per line.

For example, you can specify the ``name`` and ``address`` fields in a
file ``fields.txt``:

.. code-block:: none

   name
   address

Then, by using the :option:`--fieldFile`
option, you can specify the fields to export with the file:

.. code-block:: sh

   mongoexport --db users --collection contacts --csv --fieldFile fields.txt --out /opt/backups/contacts.csv

Export in JSON Format
~~~~~~~~~~~~~~~~~~~~~

The next example creates an export of the collection ``contacts``
from the MongoDB instance running on the localhost port number ``27017``,
with journaling explicitly enabled. This writes the export to the
``contacts.json`` file in :term:`JSON` format.

.. code-block:: sh

   mongoexport --db sales --collection contacts --out contacts.json --journal

Export Collection Directly From Data Files
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following example exports the collection ``contacts`` from the
``sales`` database located in the MongoDB data files located at
``/srv/mongodb/``. This operation writes the export to standard output
in :term:`JSON` format.

.. code-block:: sh

   mongoexport --db sales --collection contacts --dbpath /srv/mongodb/

.. warning::

   The above example will only succeed if there is no :binary:`~bin.mongod`
   connected to the data files located in the ``/srv/mongodb/``
   directory.

Export from Remote Host Running with Authentication
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following example exports the collection ``contacts`` from the
database ``marketing`` . This data resides on the MongoDB instance
located on the host ``mongodb1.example.net`` running on port ``37017``,
which requires the username ``user`` and the password ``pass``.

.. code-block:: sh

   mongoexport --host mongodb1.example.net --port 37017 --username user --password pass --collection contacts --db marketing --out mdb1-examplenet.json

.. _mongoexport-type-fidelity:

Type Fidelity
-------------

.. include:: /includes/warning-type-fidelity-loss.rst

JSON can only represent a subset of the types supported by BSON. To
preserve type information, :binary:`~bin.mongoexport` uses the :doc:`strict
mode representation </reference/mongodb-extended-json>` for certain
types.

For example, the following insert operation in the :binary:`~bin.mongo`
shell uses the :doc:`mongoShell mode representation
</reference/mongodb-extended-json>` for the BSON types
:bsontype:`data_date` and :bsontype:`data_numberlong`:

.. code-block:: javascript

   use test
   db.traffic.insert( { _id: 1, volume: NumberLong(2980000), date: new Date() } )

Use :binary:`~bin.mongoexport` to export the data:

.. code-block:: none

   mongoexport --db test --collection traffic --out traffic.json

The exported data is in :doc:`strict mode representation
</reference/mongodb-extended-json>` to preserve type information:

.. code-block:: javascript

   { "_id" : 1, "volume" : { "$numberLong" : "2980000" }, "date" : { "$date" : "2014-03-13T13:47:42.483-0400" } }

See :doc:`/reference/mongodb-extended-json` for a complete list of
these types and the representations used.
