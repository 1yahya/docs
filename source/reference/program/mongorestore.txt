.. _mongorestore:

================
``mongorestore``
================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol
.. |tool-binary| replace:: mongorestore

Synopsis
--------

The :binary:`~bin.mongorestore` program writes data from a binary database
dump created by :binary:`~bin.mongodump` to a MongoDB
instance. :binary:`~bin.mongorestore` can create a new database or add
data to an existing database.

:binary:`~bin.mongorestore` can write data to either `mongod` or :binary:`~bin.mongos`
instances, in addition to writing directly to MongoDB data files
without an active :binary:`~bin.mongod`.

Behavior
--------

If you restore to an existing database, :binary:`~bin.mongorestore` will
only insert into the existing database, and does not perform updates
of any kind. If existing documents have the same value ``_id`` field
in the target database and collection,
:binary:`~bin.mongorestore` will *not* overwrite those documents.

Remember the following properties of :binary:`~bin.mongorestore` behavior:

- :binary:`~bin.mongorestore` recreates indexes recorded by
  :binary:`~bin.mongodump`.

- all operations are inserts, not updates.

- :binary:`~bin.mongorestore` does not wait for a response from a
  :binary:`~bin.mongod` to ensure that the MongoDB process has received or
  recorded the operation.

  The :binary:`~bin.mongod` will record any errors to its log that occur
  during a restore operation, but :binary:`~bin.mongorestore` will not
  receive errors.

.. include:: /includes/warning-mongodump-compatibility-2.2.rst

.. _mongorestore-required-access:

Required Access
---------------

Restore Collection Data
~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/access-mongorestore-collections.rst

Restore Users and User Data
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/access-mongorestore.rst

Options
-------

.. binary:: mongorestore

.. program:: mongorestore

.. option:: --help

   Returns information on the options and use of :program:`mongorestore`.


.. option:: --verbose, -v

   Increases the amount of internal reporting returned on standard output
   or in log files. Increase the verbosity with the ``-v`` form by
   including the option multiple times, (e.g. ``-vvvvv``.)
   


.. option:: --quiet

   Runs the :program:`mongorestore` in a quiet mode that attempts to limit the amount
   of output.

   This option suppresses:
   
   - output from :term:`database commands <database command>`
   
   - replication activity
   
   - connection accepted events
   
   - connection closed events
   


.. option:: --version

   Returns the :program:`mongorestore` release number.


.. option:: --host <hostname><:port>, -h <hostname><:port>

   *Default*: localhost:27017

   Specifies a resolvable hostname for the :binary:`~bin.mongod` to which to
   connect. By default, the :program:`mongorestore` attempts to connect to a MongoDB
   instance running on the localhost on port number ``27017``.
   
   To connect to a replica set, specify the :setting:`replica set name
   <~replication.replSetName>` and a seed list of set members. Use the
   following form:
   
   .. code-block:: none
   
      <replSetName>/<hostname1><:port>,<hostname2><:port>,<...>
   
   You can always connect directly to a single MongoDB instance by
   specifying the host and port number directly.


.. option:: --port <port>

   *Default*: 27017

   Specifies the TCP port on which the MongoDB instance listens for
   client connections.
   


.. option:: --ipv6

   Enables IPv6 support and allows the :program:`mongorestore` to connect to the
   MongoDB instance using an IPv6 network. All MongoDB programs and
   processes disable IPv6 support by default.


.. option:: --ssl

   .. versionadded:: 2.6
   
   Enables connection to a :binary:`~bin.mongod` or :binary:`~bin.mongos` that has
   TLS/SSL support enabled.
   
   The default distribution of MongoDB does not contain support for TLS/SSL.
   For more information on MongoDB and TLS/SSL, see :doc:`/tutorial/configure-ssl`.
   


.. option:: --sslCAFile <filename>

   .. versionadded:: 2.6
   
   Specifies the :file:`.pem` file that contains the root certificate chain
   from the Certificate Authority. Specify the file name of the
   :file:`.pem` file using relative or absolute paths.
   
   The default distribution of MongoDB does not contain support for
   TLS/SSL. For more information on MongoDB and TLS/SSL, see
   :doc:`/tutorial/configure-ssl`.
   
   .. include:: /includes/warning-always-use-sslCAFile-for-mongo.rst
   


.. option:: --sslPEMKeyFile <filename>

   .. versionadded:: 2.6
   
   Specifies the :file:`.pem` file that contains both the TLS/SSL certificate
   and key. Specify the file name of the :file:`.pem` file using relative
   or absolute paths.
   
   This option is required when using the :option:`--ssl` option to connect
   to a :binary:`~bin.mongod` or :binary:`~bin.mongos` that has
   :setting:`~net.ssl.CAFile` enabled *without*
   :setting:`~net.ssl.weakCertificateValidation`.
   
   The default distribution of MongoDB does not contain support for TLS/SSL.
   For more information on MongoDB and TLS/SSL, see :doc:`/tutorial/configure-ssl`.
   


.. option:: --sslPEMKeyPassword <value>

   .. versionadded:: 2.6
   
   Specifies the password to de-crypt the certificate-key file (i.e.
   :option:`--sslPEMKeyFile`). Use the :option:`--sslPEMKeyPassword` option only if the
   certificate-key file is encrypted. In all cases, the :program:`mongorestore` will
   redact the password from all logging and reporting output.
   
   If the private key in the PEM file is encrypted and you do not specify
   the :option:`--sslPEMKeyPassword` option, the :program:`mongorestore` will prompt for a passphrase. See
   :ref:`ssl-certificate-password`.
   
   The default distribution of MongoDB does not contain support for TLS/SSL.
   For more information on MongoDB and TLS/SSL, see :doc:`/tutorial/configure-ssl`.


.. option:: --sslCRLFile <filename>

   .. versionadded:: 2.6
   
   Specifies the :file:`.pem` file that contains the Certificate Revocation
   List. Specify the file name of the :file:`.pem` file using relative or
   absolute paths.
   
   The default distribution of MongoDB does not contain support for TLS/SSL.
   For more information on MongoDB and TLS/SSL, see :doc:`/tutorial/configure-ssl`.
   


.. option:: --sslAllowInvalidCertificates

   .. versionadded:: 2.6
   
   Bypasses the validation checks for server certificates and allows
   the use of invalid certificates. When using the
   :setting:`~net.ssl.allowInvalidCertificates` setting, MongoDB logs as a
   warning the use of the invalid certificate.
   
   The default distribution of MongoDB does not contain support for TLS/SSL.
   For more information on MongoDB and TLS/SSL, see :doc:`/tutorial/configure-ssl`.
   


.. option:: --sslFIPSMode

   .. versionadded:: 2.6
   
   Directs the :program:`mongorestore` to use the FIPS mode of the installed OpenSSL
   library. Your system must have a FIPS compliant OpenSSL library to use
   the :option:`--sslFIPSMode` option.
   
   The default distribution of MongoDB does not contain support for TLS/SSL.
   For more information on MongoDB and TLS/SSL, see :doc:`/tutorial/configure-ssl`.


.. option:: --username <username>, -u <username>

   Specifies a username with which to authenticate to a MongoDB database
   that uses authentication. Use in conjunction with the ``--password`` and
   ``--authenticationDatabase`` options.
   


.. option:: --password <password>, -p <password>

   Specifies a password with which to authenticate to a MongoDB database
   that uses authentication. Use in conjunction with the ``--username`` and
   ``--authenticationDatabase`` options.
   
   If you do not specify an argument for :option:`--password`, :program:`mongorestore` will
   prompt interactively for a password on the console.


.. option:: --authenticationDatabase <dbname>

   .. versionadded:: 2.4
   
   Specifies the database that holds the user's credentials.   
   


.. option:: --authenticationMechanism <name>

   *Default*: MONGODB-CR

   .. versionadded:: 2.4
   
   .. versionchanged:: 2.6
      Added support for the ``PLAIN`` and ``MONGODB-X509`` authentication
      mechanisms.
   
   Specifies the authentication mechanism the :program:`mongorestore` instance uses to
   authenticate to the :binary:`~bin.mongod` or :binary:`~bin.mongos`.
   
   .. list-table::
      :header-rows: 1
      :widths: 20 40
   
      * - Value
   
        - Description
   
      * - MONGODB-CR
   
        - MongoDB challenge/response authentication.
   
      * - MONGODB-X509
   
        - MongoDB TLS/SSL certificate authentication.
   
      * - PLAIN
   
        - External authentication using LDAP. You can also use ``PLAIN``
          for authenticating in-database users. ``PLAIN`` transmits
          passwords in plain text. This mechanism is available only in
          `MongoDB Enterprise
          <http://www.mongodb.com/products/mongodb-enterprise>`_.
   
      * - GSSAPI
   
        - External authentication using Kerberos. This mechanism is
          available only in `MongoDB Enterprise
          <http://www.mongodb.com/products/mongodb-enterprise>`_.


.. option:: --gssapiServiceName

   .. versionadded:: 2.6
   
   Specify the name of the service using :doc:`GSSAPI/Kerberos
   </core/kerberos>`. Only required if the service does not use the
   default name of ``mongodb``.
   
   This option is available only in MongoDB Enterprise.
   


.. option:: --gssapiHostName

   .. versionadded:: 2.6
   
   Specify the hostname of a service using :doc:`GSSAPI/Kerberos
   </core/kerberos>`. *Only* required if the hostname of a machine does
   not match the hostname resolved by DNS.
   
   This option is available only in MongoDB Enterprise.
   


.. option:: --dbpath <path>

   Specifies the directory of the MongoDB data files. The :option:`--dbpath` option
   lets the :program:`mongorestore` attach directly to the local data files without
   going through a running :binary:`~bin.mongod`. When run with :option:`--dbpath`, the
   :program:`mongorestore` locks access to the data files. No :binary:`~bin.mongod` can
   access the files while the :program:`mongorestore` process runs.


.. option:: --directoryperdb

   When used in conjunction with the corresponding option in
   :binary:`~bin.mongod`, allows the :program:`mongorestore` to access data from MongoDB
   instances that use an on-disk format where every database has a distinct
   directory. This option is only relevant when specifying the
   :option:`--dbpath` option.


.. option:: --journal

   Enables the durability :term:`journal` to ensure data files remain valid
   and recoverable. This option applies only when you specify the
   . The :program:`mongorestore` enables journaling by default
   on 64-bit builds of versions after 2.0.


.. option:: --db <database>, -d <database>

   Specifies a database for :binary:`~bin.mongorestore` to restore data *into*.
   If the database does not exist, :binary:`~bin.mongorestore` creates the
   database. If you do not specify a ``<db>``, :binary:`~bin.mongorestore`
   creates new databases that correspond to the databases where data
   originated and data may be overwritten. Use this option to restore data
   into a MongoDB instance that already has data.
   
   :option:`--db` does *not* control which :term:`BSON` files
   :binary:`~bin.mongorestore` restores. You must use the
   :binary:`~bin.mongorestore` :ref:`path option <mongorestore-path-option>` to
   limit that restored data.


.. option:: --collection <collection>, -c <collection>

   Specifies a single collection for :binary:`~bin.mongorestore` to restore. If
   you do not specify :option:`--collection`, :binary:`~bin.mongorestore` takes
   the collection name from the input filename. If the input file has an
   extension, MongoDB omits the extension of the file from the collection
   name.


.. option:: --objcheck

   Forces :binary:`~bin.mongorestore` to validate all requests from clients
   upon receipt to ensure that clients never insert invalid documents into
   the database. For objects with a high degree of sub-document nesting,
   :option:`--objcheck` can have a small impact on performance. You can set
   :option:`--noobjcheck` to disable object checking at run-time.
   
   .. versionchanged:: 2.4
      MongoDB enables :option:`--objcheck` by default, to prevent any
      client from inserting malformed or invalid BSON into a MongoDB
      database.


.. option:: --noobjcheck

   .. versionadded:: 2.4
   
   Disables the default document validation that MongoDB performs on all
   incoming BSON documents.
   


.. option:: --filter <JSON>

   Limits the documents that :binary:`~bin.mongorestore` imports to only those
   documents that match the JSON document specified as ``'<JSON>'``. Be
   sure to include the document in single quotes to avoid interaction with
   your system's shell environment. For an example of :option:`--filter`,
   see :ref:`backup-restore-filter`.


.. option:: --drop

   Before restoring the collections from the dumped backup, drops the
   collections from the target database. :option:`--drop` does not drop
   collections that are not in the backup.
   
   When the restore includes the ``admin`` database, :program:`mongorestore` with
   :option:`--drop` removes all user credentials and replaces them with the
   users defined in the dump file. Therefore, in systems with
   :setting:`~security.authorization` enabled, :program:`mongorestore` must be able
   to authenticate to an existing user *and* to a user defined in the
   dump file. If :program:`mongorestore` can't authenticate to a user defined in the
   dump file, the restoration process will fail, leaving an empty
   database.


.. option:: --oplogReplay

   After restoring the database dump, replays the :term:`oplog` entries
   from the :file:`oplog.bson` file located in the top level of the dump
   directory. When used in conjunction with :option:`mongodump --oplog`,
   :binary:`~bin.mongorestore --oplogReplay <mongorestore>`
   restores the database to the point-in-time backup captured with the
   ``mongodump --oplog`` command. For an example of :option:`--oplogReplay`, see
   :ref:`backup-restore-oplogreplay`.
   
   :binary:`~bin.mongorestore --oplogReplay <mongorestore>` replays any
   valid :file:`oplog.bson` file found in the top level of the dump
   directory. That is, if you have a bson file that contains valid oplog
   entries, you can name the file ``oplog.bson`` and move it to the top
   level of the dump directory for :binary:`~bin.mongorestore --oplogReplay
   <mongorestore>` to replay.
   
   When restoring with :option:`mongorestore --oplogReplay`,
   you must restore the full output of the 
   ``mongodump --oplog`` process. You cannot restore from a subfolder of
   a dump.
   
   .. seealso:: :ref:`mongorestore Required Access <mongorestore-required-access>`


.. option:: --oplogLimit <timestamp>

   .. versionadded:: 2.2
   
   Prevents :binary:`~bin.mongorestore` from applying :term:`oplog` entries
   with timestamp newer than or equal to ``<timestamp>``. Specify
   ``<timestamp>`` values in the form of ``<time_t>:<ordinal>``, where
   ``<time_t>`` is the seconds since the UNIX epoch, and ``<ordinal>``
   represents a counter of operations in the oplog that occurred in the
   specified second.
   
   You must use :option:`--oplogLimit` in conjunction with the
   :option:`--oplogReplay` option.


.. option:: --keepIndexVersion

   Prevents :binary:`~bin.mongorestore` from upgrading the index to the latest
   version during the restoration process.
   


.. option:: --noIndexRestore

   .. versionadded:: 2.2
   
   Prevents :binary:`~bin.mongorestore` from restoring and building indexes as
   specified in the corresponding :binary:`~bin.mongodump` output.
   


.. option:: --noOptionsRestore

   .. versionadded:: 2.2
   
   Prevents :binary:`~bin.mongorestore` from setting the collection options,
   such as those specified by the :dbcommand:`collMod` :term:`database
   command`, on restored collections.
   


.. option:: --restoreDbUsersAndRoles

   Restore user and role definitions for the given database. See
   :doc:`/reference/system-roles-collection` and
   :doc:`/reference/system-users-collection` for more information.
   


.. option:: --w <number of replicas per write>

   .. versionadded:: 2.2
   
   Specifies the :term:`write concern` for each write operation that
   :binary:`~bin.mongorestore` writes to the target database. By default,
   :binary:`~bin.mongorestore` does not wait for a response for :ref:`write
   acknowledgment <write-concern-acknowledged>`.
   


.. _mongorestore-path-option:

.. option:: <path>

   The final argument of the :binary:`~bin.mongorestore` command is a
   directory path. This argument specifies the location of the
   database dump from which to restore.
   
   If you are running :binary:`~bin.mongorestore` with :option:`--oplogReplay`,
   you must restore the whole database dump: you cannot specify a
   subdirectory from which to restore.
   


Use
---

See :doc:`/tutorial/backup-with-mongodump`
for a larger overview of :binary:`~bin.mongorestore`
usage. Also see the :doc:`mongodump` document for an overview of the
:binary:`~bin.mongodump`, which provides the related inverse
functionality.

Consider the following example:

.. code-block:: sh

   mongorestore --collection people --db accounts dump/accounts/people.bson

Here, :binary:`~bin.mongorestore` reads the database dump in the ``dump/``
sub-directory of the current directory, and restores *only* the
documents in the collection named ``people`` from the database named
``accounts``. :binary:`~bin.mongorestore` restores data to the instance
running on the localhost interface on port ``27017``.

In the next example, :binary:`~bin.mongorestore` restores a backup of the
database instance located in ``dump`` to a database instance stored
in the ``/srv/mongodb`` on the local machine. This requires that there
are no active :binary:`~bin.mongod` instances attached to ``/srv/mongodb``
data directory.

.. code-block:: sh

   mongorestore --dbpath /srv/mongodb

In the final example, :binary:`~bin.mongorestore` restores a database
dump located at ``/opt/backup/mongodump-2011-10-24``, to a database
running on port ``37017`` on the host
``mongodb1.example.net``. The :binary:`~bin.mongorestore` command authenticates to
the MongoDB instance using the username ``user`` and the
password ``pass``, as follows:

.. code-block:: sh

   mongorestore --host mongodb1.example.net --port 37017 --username user --password pass /opt/backup/mongodump-2011-10-24
