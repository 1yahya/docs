==========================
Configuration File Options
==========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

The following page describes the configuration options available in
MongoDB |version|. For configuration file options for other versions of
MongoDB, see the appropriate version of the MongoDB Manual.

Configuration File
------------------

You can configure :binary:`~bin.mongod` and :binary:`~bin.mongos` instances at
startup using a configuration file. The configuration file contains
settings that are equivalent to the :binary:`~bin.mongod` and
:binary:`~bin.mongos` command-line options.

Using a configuration file makes managing :binary:`~bin.mongod` and
:binary:`~bin.mongos` options easier, especially for large-scale
deployments. You can also add comments to the configuration file to
explain the server's settings.

- On Linux, a default :file:`/etc/mongod.conf` configuration file is
  included when using a package manager to install MongoDB.

- On macOS, a default :file:`/usr/local/etc/mongod.conf` configuration
  file is included when installing from MongoDB's official Homebrew tap.

File Format
~~~~~~~~~~~

.. important::

   .. versionchanged:: 2.6
      MongoDB 2.6 introduces a YAML-based configuration file format.
      The :v2.4:`2.4 configuration file format
      </reference/configuration-options>` remains for backward
      compatibility.

MongoDB configuration files use the `YAML <http://www.yaml.org>`_ format
[#yaml-json]_.

The following sample configuration file contains several :binary:`~bin.mongod`
settings that you may adapt to your local configuration:

.. note::

   YAML does not support tab characters for indentation: use spaces instead.

.. code-block:: yaml

   systemLog:
      destination: file
      path: "/var/log/mongodb/mongod.log"
      logAppend: true
   storage:
      journal:
         enabled: true
   processManagement:
      fork: true
   net:
      bindIp: 127.0.0.1
      port: 27017
   setParameter:
      enableLocalhostAuthBypass: false
   ...

The Linux package init scripts included in the official MongoDB packages depend
on specific values for :setting:`systemLog.path`, :setting:`storage.dbpath`, and
:setting:`processManagement.fork`. If you modify these settings in the default
configuration file, :binary:`~bin.mongod` may not start.

.. [#yaml-json] YAML is a superset of :term:`JSON`.

Use the Configuration File
~~~~~~~~~~~~~~~~~~~~~~~~~~

To start :binary:`~bin.mongod` or :binary:`~bin.mongos` using a config file,
specify the config file with the ``--config`` option or the
``-f`` option, as in the following examples:

The following examples use :option:`mongod --config` and
:binary:`mongos --config` to specify the configuration file:

.. code-block:: sh

   mongod --config /etc/mongod.conf

   mongos --config /etc/mongos.conf

You can also use the ``-f`` alias to specify the configuration
file, as in the following:

.. code-block:: sh

   mongod -f /etc/mongod.conf

   mongos -f /etc/mongos.conf

If you installed from a package and have started MongoDB using your
system's :term:`init script`, you are already using a configuration
file.

Core Options
------------

``systemLog`` Options
~~~~~~~~~~~~~~~~~~~~~

.. code-block:: yaml

   systemLog:
      verbosity: <int>
      quiet: <boolean>
      traceAllExceptions: <boolean>
      syslogFacility: <string>
      path: <string>
      logAppend: <boolean>
      logRotate: <string>
      destination: <string>
      timeStampFormat: <string>
      component:
         accessControl:
            verbosity: <int>
         command:
            verbosity: <int>

         # COMMENT additional component verbosity settings omitted for brevity

.. setting:: systemLog.verbosity

   *Type*: integer

   *Default*: 0

   .. versionchanged:: 3.0
   
   The default :doc:`log message </reference/log-messages>`
   verbosity level for :ref:`components <log-message-components>`. The
   verbosity level determines the amount of :ref:`Informational and
   Debug <log-severity-levels>` messages MongoDB outputs.
   
   .. include:: /includes/log-verbosity-levels.rst
   
   To use a different verbosity level for a named component, use the
   component's verbosity setting. For example, use the
   :setting:`systemLog.component.accessControl.verbosity` to set the
   verbosity level specifically for :data:`ACCESS` components.
   
   See the ``systemLog.component.<name>.verbosity`` settings for
   specific component verbosity settings.
   
   For various ways to set the log verbosity level, see
   :ref:`log-messages-configure-verbosity`.
   


.. setting:: systemLog.quiet

   *Type*: boolean

   Run the :binary:`~bin.mongos` or :binary:`~bin.mongod` in a quiet mode that attempts to limit the amount
   of output.

   :setting:`systemLog.quiet` is **not** recommended for production systems as it may make
   tracking problems during particular connections much more difficult.


.. setting:: systemLog.traceAllExceptions

   *Type*: boolean

   Print verbose information for debugging. Use for additional logging for
   support-related troubleshooting.
   


.. setting:: systemLog.syslogFacility

   *Type*: string

   *Default*: user

   The facility level used when logging messages to syslog.
   The value you specify must be supported by your
   operating system's implementation of syslog. To use this option, you
   must set :setting:`systemLog.destination` to ``syslog``..


.. setting:: systemLog.path

   *Type*: string

   The path of the log file to which :binary:`~bin.mongod` or :binary:`~bin.mongos` should send all diagnostic
   logging information, rather than the standard output or the host's
   :term:`syslog`. MongoDB creates the log file at the specified path.

   .. include:: /includes/extracts/linux-config-expectations-systemlog-path.rst
   


.. setting:: systemLog.logAppend

   *Type*: boolean

   *Default*: false

   When ``true``, :binary:`~bin.mongos` or :binary:`~bin.mongod` appends new entries to the end of the existing log file when the :binary:`~bin.mongos` or :binary:`~bin.mongod`
   instance restarts. Without this option, :binary:`~bin.mongod` will back up the
   existing log and create a new file.


.. setting:: systemLog.logRotate

   *Type*: string

   *Default*: rename

   
   .. versionadded:: 3.0.0
   
   The behavior for the :dbcommand:`logRotate` command.
   Specify either ``rename`` or ``reopen``:
   
   - ``rename`` renames the log file.
   
   - ``reopen`` closes and reopens the log file following the typical
     Linux/Unix log rotate behavior. Use ``reopen`` when using the
     Linux/Unix logrotate utility to avoid log loss.
   
     If you specify ``reopen``, you must also set :setting:`systemLog.logAppend` to ``true``.


.. setting:: systemLog.destination

   *Type*: string

   The destination to which MongoDB sends all log output. Specify either
   ``file`` or ``syslog``. If you specify ``file``, you must also specify
   :setting:`systemLog.path`.
   
   If you do not specify :setting:`systemLog.destination`, MongoDB sends
   all log output to standard output.
   


.. setting:: systemLog.timeStampFormat

   *Type*: string

   *Default*: iso8601-local

   The time format for timestamps in log messages. Specify one of the
   following values:
   
   .. list-table::
      :header-rows: 1
      :widths: 20 40
   
      * - Value
   
        - Description
   
      * - ``ctime``
   
        - Displays timestamps as ``Wed Dec 31
          18:17:54.811``.
   
      * - ``iso8601-utc``
   
        - Displays timestamps in Coordinated Universal Time (UTC) in the
          ISO-8601 format. For example, for New York at the start of the
          Epoch: ``1970-01-01T00:00:00.000Z``
   
      * - ``iso8601-local``
   
        - Displays timestamps in local time in the ISO-8601
          format. For example, for New York at the start of the Epoch:
          ``1969-12-31T19:00:00.000-0500``
   


``systemLog.component`` Options
```````````````````````````````

.. code-block:: yaml

   systemLog:
      component:
         accessControl:
            verbosity: <int>
         command:
            verbosity: <int>

         # COMMENT some component verbosity settings omitted for brevity

         storage:
            verbosity: <int>
            journal:
               verbosity: <int>
         write:
            verbosity: <int>

.. setting:: systemLog.component.accessControl.verbosity

   *Type*: integer

   *Default*: 0

   .. versionadded:: 3.0
   
   The log message verbosity level for components related to
   access control. See :data:`ACCESS` components.

   .. include:: /includes/log-verbosity-levels.rst
   


.. setting:: systemLog.component.command.verbosity

   *Type*: integer

   *Default*: 0

   .. versionadded:: 3.0
   
   The log message verbosity level for components related to
   commands. See :data:`COMMAND` components.

   .. include:: /includes/log-verbosity-levels.rst
   


.. setting:: systemLog.component.control.verbosity

   *Type*: integer

   *Default*: 0

   .. versionadded:: 3.0
   
   The log message verbosity level for components related to
   control operations. See :data:`CONTROL` components.

   .. include:: /includes/log-verbosity-levels.rst
   


.. setting:: systemLog.component.ftdc.verbosity

   *Type*: integer

   *Default*: 0

   .. versionadded:: 3.2
   
   The log message verbosity level for components related to
   diagnostic data collection operations. See :data:`FTDC` components.

   .. include:: /includes/log-verbosity-levels.rst
   


.. setting:: systemLog.component.geo.verbosity

   *Type*: integer

   *Default*: 0

   .. versionadded:: 3.0
   
   The log message verbosity level for components related to
   geospatial parsing operations. See :data:`GEO` components.

   .. include:: /includes/log-verbosity-levels.rst
   


.. setting:: systemLog.component.index.verbosity

   *Type*: integer

   *Default*: 0

   .. versionadded:: 3.0
   
   The log message verbosity level for components related to
   indexing operations. See :data:`INDEX` components.

   .. include:: /includes/log-verbosity-levels.rst
   


.. setting:: systemLog.component.network.verbosity

   *Type*: integer

   *Default*: 0

   .. versionadded:: 3.0
   
   The log message verbosity level for components related to
   networking operations. See :data:`NETWORK` components.

   .. include:: /includes/log-verbosity-levels.rst
   


.. setting:: systemLog.component.query.verbosity

   *Type*: integer

   *Default*: 0

   .. versionadded:: 3.0
   
   The log message verbosity level for components related to
   query operations. See :data:`QUERY` components.

   .. include:: /includes/log-verbosity-levels.rst
   


.. setting:: systemLog.component.replication.verbosity

   *Type*: integer

   *Default*: 0

   .. versionadded:: 3.0
   
   The log message verbosity level for components related to
   replication. See :data:`REPL` components.

   .. include:: /includes/log-verbosity-levels.rst
   


.. setting:: systemLog.component.sharding.verbosity

   *Type*: integer

   *Default*: 0

   .. versionadded:: 3.0
   
   The log message verbosity level for components related to
   sharding. See :data:`SHARDING` components.

   .. include:: /includes/log-verbosity-levels.rst
   


.. setting:: systemLog.component.storage.verbosity

   *Type*: integer

   *Default*: 0

   .. versionadded:: 3.0
   
   The log message verbosity level for components related to
   storage. See :data:`STORAGE` components.

   If :setting:`systemLog.component.storage.journal.verbosity` is unset,
   :setting:`systemLog.component.storage.verbosity` level also applies to
   journaling components.
   
   .. include:: /includes/log-verbosity-levels.rst
   


.. setting:: systemLog.component.storage.journal.verbosity

   *Type*: integer

   *Default*: 0

   .. versionadded:: 3.0
   
   The log message verbosity level for components related to
   journaling. See :data:`JOURNAL` components.

   If :setting:`systemLog.component.storage.journal.verbosity` is
   unset, the journaling components have the same verbosity level as the
   parent storage components: i.e. either the
   :setting:`systemLog.component.storage.verbosity` level if
   set or the default verbosity level.
   
   .. include:: /includes/log-verbosity-levels.rst
   


.. setting:: systemLog.component.write.verbosity

   *Type*: integer

   *Default*: 0

   .. versionadded:: 3.0
   
   The log message verbosity level for components related to
   write operations. See :data:`WRITE` components.

   .. include:: /includes/log-verbosity-levels.rst
   


``processManagement`` Options
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: yaml

   processManagement:
      fork: <boolean>
      pidFilePath: <string>

.. setting:: processManagement.fork

   *Type*: boolean

   *Default*: false

   Enable a :term:`daemon` mode that runs the :binary:`~bin.mongos` or :binary:`~bin.mongod` process in the
   background. By default :binary:`~bin.mongos` or :binary:`~bin.mongod` does not run as a daemon:
   typically you will run :binary:`~bin.mongos` or :binary:`~bin.mongod` as a daemon, either by using
   :setting:`processManagement.fork` or by using a controlling process that handles the
   daemonization process (e.g. as with ``upstart`` and ``systemd``).
   
   The :setting:`processManagement.fork` option is not supported on Windows.

   .. include:: /includes/extracts/linux-config-expectations-processmanagement-fork.rst
   

.. setting:: processManagement.pidFilePath

   *Type*: string

   Specifies a file location to hold the process ID of the :binary:`~bin.mongos` or :binary:`~bin.mongod`
   process where :binary:`~bin.mongos` or :binary:`~bin.mongod` will write its PID. This is useful for
   tracking the :binary:`~bin.mongos` or :binary:`~bin.mongod` process in combination with the
   :setting:`processManagement.fork` setting. Without a specified :setting:`processManagement.pidFilePath` option, the
   process creates no PID file.


``net`` Options
~~~~~~~~~~~~~~~

.. code-block:: yaml

   net:
      port: <int>
      bindIp: <string>
      maxIncomingConnections: <int>
      wireObjectCheck: <boolean>
      ipv6: <boolean>
      unixDomainSocket:
         enabled: <boolean>
         pathPrefix: <string>
         filePermissions: <int>
      http:
         enabled: <boolean>
         JSONPEnabled: <boolean>
         RESTInterfaceEnabled: <boolean>
      ssl:
         sslOnNormalPorts: <boolean>  # deprecated since 2.6
         mode: <string>
         PEMKeyFile: <string>
         PEMKeyPassword: <string>
         clusterFile: <string>
         clusterPassword: <string>
         CAFile: <string>
         CRLFile: <string>
         allowConnectionsWithoutCertificates: <boolean>
         allowInvalidCertificates: <boolean>
         allowInvalidHostnames: <boolean>
         disabledProtocols: <string>
         FIPSMode: <boolean>

.. setting:: net.port

   *Type*: integer

   *Default*: 27017

   The TCP port on which the MongoDB instance listens for
   client connections.


.. setting:: net.bindIp

   *Type*: string

   *Default*: All interfaces.

   .. versionchanged:: 2.6.0
      The ``deb`` and ``rpm`` packages include a default configuration
      file (``/etc/mongod.conf``) that sets :setting:`net.bindIp` to ``127.0.0.1``.
   
   The IP addresses and/or full Unix domain socket paths on which
   :binary:`~bin.mongos` or :binary:`~bin.mongod` should listen for client connections. You may attach
   :binary:`~bin.mongos` or :binary:`~bin.mongod` to any interface. To bind to multiple addresses, enter a
   list of comma-separated values.
   
   .. example:: ``localhost,/tmp/mongod.sock``
   
   You can specify both IPv4 and IPv6 addresses, or hostnames that
   resolve to an IPv4 or IPv6 address.
   
   .. example:: ``localhost, 2001:0DB8:e132:ba26:0d5c:2774:e7f9:d513``
   
   .. note::
   
      If specifying an IPv6 address *or* a hostname that resolves to an
      IPv6 address to :setting:`net.bindIp`, you must start :binary:`~bin.mongos` or :binary:`~bin.mongod` with 
      :setting:`net.ipv6 : true <net.ipv6>` to enable IPv6 support. Specifying an IPv6 address
      to :setting:`net.bindIp` does not enable IPv6 support.
   
   If specifying a 
   `link-local IPv6 address <https://en.wikipedia.org/w/index.php?title=Link-local_address&oldid=880793020#IPv6>`_ 
   (``fe80::/10``), you must append the 
   `zone index <https://en.wikipedia.org/w/index.php?title=IPv6_address&oldid=877601778#Scoped_literal_IPv6_addresses>`_
   to that address (i.e. ``fe80::<address>%<adapter-name>``). 
   
   .. example:: ``localhost,fe80::a00:27ff:fee0:1fcf%enp0s3``
   
   .. include:: /includes/tip-hostnames.rst
   
   .. include:: /includes/warning-bind-ip-security-considerations.rst

   
   To bind to all IPv4 addresses, enter ``0.0.0.0``.
   
   To bind to all IPv4 and IPv6 addresses, enter ``0.0.0.0,::``.
   


.. setting:: net.maxIncomingConnections

   *Type*: integer

   *Default*: 65536

   The maximum number of simultaneous connections that :binary:`~bin.mongos` or :binary:`~bin.mongod` will
   accept. This setting has no effect if it is higher than your operating
   system's configured maximum connection tracking threshold.
   
   Do not assign too low of a value to this option, or you will encounter errors
   during normal application operation.

   .. include:: /includes/fact-maxconns-mongos.rst
   


.. setting:: net.wireObjectCheck

   *Type*: boolean

   *Default*: true

   When ``true``, the :binary:`~bin.mongod` or :binary:`~bin.mongos` instance  validates
   all requests from clients upon receipt to prevent clients from inserting
   malformed or invalid BSON into a MongoDB database.
   
   For objects with a high degree of sub-document nesting, :setting:`net.wireObjectCheck` can
   have a small impact on performance.


.. setting:: net.ipv6

   *Type*: boolean

   *Default*: false

   
   Set :setting:`net.ipv6` to ``true`` to enable IPv6 support. :binary:`~bin.mongos`/:binary:`~bin.mongod` disables IPv6 support by default.
   
   Setting :setting:`net.ipv6` does *not* direct the :binary:`~bin.mongos`/:binary:`~bin.mongod` to listen on any
   local IPv6 addresses or interfaces. To configure the :binary:`~bin.mongos`/:binary:`~bin.mongod` to
   listen on an IPv6 interface, you must configure :setting:`net.bindIp` with one
   or more IPv6 addresses or hostnames that resolve to IPv6 addresses.


.. PENDING SERVER-13097


``net.unixDomainSocket`` Options
````````````````````````````````

.. code-block:: yaml

   net:
      unixDomainSocket:
         enabled: <boolean>
         pathPrefix: <string>
         filePermissions: <int>

.. setting:: net.unixDomainSocket.enabled

   *Type*: boolean

   *Default*: true

   Enable or disable listening on the UNIX domain socket. :setting:`net.unixDomainSocket.enabled` applies only
   to Unix-based systems.

   When :setting:`net.unixDomainSocket.enabled` is ``true``, :binary:`~bin.mongos` or :binary:`~bin.mongod` listens on the UNIX socket.
   
   The :binary:`~bin.mongos` or :binary:`~bin.mongod` process always listens on the UNIX socket unless
   one of the following is true:
   
   - :setting:`net.unixDomainSocket.enabled` is ``false``
   
   - ``--nounixsocket`` is set. The command
     line option takes precedence over the configuration file setting.
   
   - :setting:`net.bindIp` is not set
   
   - :setting:`net.bindIp` does not specify ``127.0.0.1``
   
   .. |mongodb-package| replace:: :binary:`~bin.mongos` or :binary:`~bin.mongod`
   
   .. include:: /includes/note-deb-and-rpm-default-to-localhost.rst


.. setting:: net.unixDomainSocket.pathPrefix

   *Type*: string

   *Default*: /tmp

   The path for the UNIX socket. :setting:`net.unixDomainSocket.pathPrefix` applies only
   to Unix-based systems.
   
   If this option has no value, the
   :binary:`~bin.mongos` or :binary:`~bin.mongod` process creates a socket with ``/tmp`` as a prefix. MongoDB
   creates and listens on a UNIX socket unless one of the following is true:
   
   - :setting:`net.unixDomainSocket.enabled` is ``false``
   
   - ``--nounixsocket`` is set
   
   - :setting:`net.bindIp` is not set
   
   - :setting:`net.bindIp` does not specify ``127.0.0.1``


.. setting:: net.unixDomainSocket.filePermissions

   *Type*: int

   *Default*: ``0700``

   Sets the permission for the UNIX domain socket file.
   
   :setting:`net.unixDomainSocket.filePermissions` applies only to Unix-based systems.


``net.http`` Options
````````````````````

.. code-block:: yaml

   net:
      http:
         enabled: <boolean>
         JSONPEnabled: <boolean>
         RESTInterfaceEnabled: <boolean>

.. include:: /includes/warning-http-interface.rst

.. setting:: net.http.enabled

   *Type*: boolean

   *Default*: false

   
   .. include:: /includes/fact-deprecated-http-interface.rst
   
   Enable or disable the HTTP interface. Enabling the interface can increase
   network exposure.
   
   Leave the HTTP interface *disabled* for production deployments. If you
   *do* enable this interface, you should only allow trusted clients to
   access this port. See :ref:`security-firewalls`.
   
   .. note::
   
      - .. include:: /includes/fact-http-interface-kerberos.rst
   
   .. versionadded:: 2.6


.. setting:: net.http.JSONPEnabled

   *Type*: boolean

   *Default*: false

   Enable or disable :term:`JSONP` access via an HTTP interface. Enabling the
   interface can increase network exposure. The :setting:`net.http.JSONPEnabled` option enables the
   HTTP interface, even if the :setting:`HTTP interface <net.http.enabled>`
   option is disabled.
   
   .. include:: /includes/fact-deprecated-http-interface.rst

   The :setting:`net.http.JSONPEnabled` setting is available only for :binary:`~bin.mongod`.


.. setting:: net.http.RESTInterfaceEnabled

   *Type*: boolean

   *Default*: false

   Enable or disable the simple :term:`REST` API. Enabling the :term:`REST` API
   enables the HTTP interface, even if the :setting:`HTTP interface
   <net.http.enabled>` option is disabled, and as a result can increase
   network exposure.
   
   .. include:: /includes/fact-deprecated-http-interface.rst

   The :setting:`net.http.RESTInterfaceEnabled` setting is available only for :binary:`~bin.mongod`.


``net.ssl`` Options
```````````````````

.. code-block:: yaml

   net:
      ssl:
         sslOnNormalPorts: <boolean>  # deprecated since 2.6
         mode: <string>
         PEMKeyFile: <string>
         PEMKeyPassword: <string>
         clusterFile: <string>
         clusterPassword: <string>
         CAFile: <string>
         CRLFile: <string>
         allowConnectionsWithoutCertificates: <boolean>
         allowInvalidCertificates: <boolean>
         allowInvalidHostnames: <boolean>
         disabledProtocols: <string>
         FIPSMode: <boolean>

.. setting:: net.ssl.sslOnNormalPorts

   *Type*: boolean

   .. deprecated:: 2.6 Use :setting:`net.ssl.mode: requireSSL <~net.ssl.mode>` instead.
   
   Enable or disable TLS/SSL for :binary:`~bin.mongos` or :binary:`~bin.mongod`.
   
   With :setting:`net.ssl.sslOnNormalPorts`, a :binary:`~bin.mongos` or :binary:`~bin.mongod` requires TLS/SSL encryption for all
   connections on the default MongoDB port, or the port specified by
   :setting:`net.port`. By default, :setting:`net.ssl.sslOnNormalPorts` is
   disabled.
   
   .. include:: /includes/extracts/ssl-facts-see-more.rst


.. setting:: net.ssl.mode

   *Type*: string

   .. versionadded:: 2.6
   
   Enable or disable TLS/SSL or mixed TLS/SSL used for all network connections. The
   argument to the :setting:`net.ssl.mode` setting can be one of the following:
   
   .. list-table::
      :header-rows: 1
      :widths: 20 40
   
      * - Value
   
        - Description
   
      * - ``disabled``
   
        - The server does not use TLS/SSL.
   
      * - ``allowSSL``
   
        - Connections between servers do not use TLS/SSL. For incoming
          connections, the server accepts both TLS/SSL and non-TLS/non-SSL.
   
      * - ``preferSSL``
   
        - Connections between servers use TLS/SSL. For incoming
          connections, the server accepts both TLS/SSL and non-TLS/non-SSL.
   
      * - ``requireSSL``
   
        - The server uses and accepts only TLS/SSL encrypted connections.
   
   .. include:: /includes/extracts/ssl-facts-x509-ca-file.rst
   
   .. include:: /includes/extracts/ssl-facts-see-more.rst


.. setting:: net.ssl.PEMKeyFile

   *Type*: string

   The :file:`.pem` file that contains both the TLS/SSL certificate
   and key. Specify the file name of the :file:`.pem` file using relative
   or absolute paths.
   
   You must specify :setting:`net.ssl.PEMKeyFile` when TLS/SSL is enabled.
   
   .. include:: /includes/extracts/ssl-facts-see-more.rst


.. setting:: net.ssl.PEMKeyPassword

   *Type*: string

   The password to de-crypt the certificate-key file (i.e.
   :setting:`~net.ssl.PEMKeyFile`). Use the :setting:`net.ssl.PEMKeyPassword` option only if the
   certificate-key file is encrypted. In all cases, the :binary:`~bin.mongos` or :binary:`~bin.mongod` will
   redact the password from all logging and reporting output.
   
   .. versionchanged:: 2.6
      If the private key in the PEM file is encrypted and you do not
      specify the :setting:`net.ssl.PEMKeyPassword` option, the :binary:`~bin.mongos` or :binary:`~bin.mongod` will prompt for a
      passphrase. See :ref:`ssl-certificate-password`.
   
   .. include:: /includes/extracts/ssl-facts-see-more.rst


.. setting:: net.ssl.clusterFile

   *Type*: string

   .. versionadded:: 2.6
   
   The :file:`.pem` file that contains the x.509 certificate-key
   file for :ref:`membership authentication <x509-internal-authentication>`
   for the cluster or replica set.
   
   If :setting:`net.ssl.clusterFile` does not specify the ``.pem`` file for internal cluster
   authentication, the cluster uses the ``.pem`` file specified in the
   :setting:`~net.ssl.PEMKeyFile` setting.
   
   .. include:: /includes/extracts/ssl-facts-x509-ca-file.rst
   
   .. include:: /includes/extracts/ssl-facts-see-more.rst


.. setting:: net.ssl.clusterPassword

   *Type*: string

   .. versionadded:: 2.6
   
   The password to de-crypt the x.509 certificate-key file
   specified with ``--sslClusterFile``. Use the :setting:`net.ssl.clusterPassword` option only
   if the certificate-key file is encrypted. In all cases, the :binary:`~bin.mongos` or :binary:`~bin.mongod`
   will redact the password from all logging and reporting output.
   
   If the x.509 key file is encrypted and you do not specify the
   :setting:`net.ssl.clusterPassword` option, the :binary:`~bin.mongos` or :binary:`~bin.mongod` will prompt for a passphrase. See
   :ref:`ssl-certificate-password`.
   
   .. include:: /includes/extracts/ssl-facts-see-more.rst


.. setting:: net.ssl.CAFile

   *Type*: string

   
   The :file:`.pem` file that contains the root certificate chain
   from the Certificate Authority. Specify the file name of the
   :file:`.pem` file using relative or absolute paths.
   
   .. include:: /includes/extracts/ssl-facts-x509-ca-file.rst
   .. include:: /includes/extracts/ssl-facts-see-more.rst


.. setting:: net.ssl.CRLFile

   *Type*: string

   
   The the :file:`.pem` file that contains the Certificate Revocation
   List. Specify the file name of the :file:`.pem` file using relative or
   absolute paths.
   
   .. include:: /includes/extracts/ssl-facts-see-more.rst


.. setting:: net.ssl.allowConnectionsWithoutCertificates

   *Type*: boolean

   Enable or disable the requirement for TLS/SSL certificate validation that
   :setting:`~net.ssl.CAFile` enables. With the :setting:`net.ssl.allowConnectionsWithoutCertificates` option, the :binary:`~bin.mongos` or :binary:`~bin.mongod`
   will accept connections when the client does not present a certificate
   when establishing the connection.
   
   If the client presents a certificate and the :binary:`~bin.mongos` or :binary:`~bin.mongod` has :setting:`net.ssl.allowConnectionsWithoutCertificates`
   enabled, the :binary:`~bin.mongos` or :binary:`~bin.mongod` will validate the certificate using the root
   certificate chain specified by :setting:`~net.ssl.CAFile` and reject clients
   with invalid certificates.
   
   Use the :setting:`net.ssl.allowConnectionsWithoutCertificates` option if you have a mixed deployment that includes
   clients that do not or cannot present certificates to the :binary:`~bin.mongos` or :binary:`~bin.mongod`.
   
   .. include:: /includes/extracts/ssl-facts-see-more.rst


.. setting:: net.ssl.allowInvalidCertificates

   *Type*: boolean

   
   Enable or disable the validation checks for TLS/SSL certificates on other
   servers in the cluster and allows the use of invalid certificates to
   connect.
   
   .. note::
   
      .. include:: /includes/extracts/ssl-facts-x509-invalid-certificate.rst
   
   When using
   the :setting:`net.ssl.allowInvalidCertificates` setting, MongoDB
   logs a warning regarding the use of the invalid certificate.
   
   .. include:: /includes/extracts/ssl-facts-see-more.rst


.. setting:: net.ssl.allowInvalidHostnames

   *Type*: boolean

   *Default*: false

   .. versionadded:: 3.0
   
   When :setting:`net.ssl.allowInvalidHostnames` is ``true``, MongoDB disables the validation of the
   hostnames in TLS/SSL certificates, allowing :binary:`~bin.mongod` to connect to
   MongoDB instances if the hostname their certificates do not match the
   specified hostname.
   
   .. include:: /includes/extracts/ssl-facts-see-more.rst


.. setting:: net.ssl.disabledProtocols

   *Type*: string

   .. versionadded:: 3.0.7
   
   Prevents a MongoDB server running with TLS/SSL from accepting incoming
   connections that use a specific protocol or protocols. :setting:`net.ssl.disabledProtocols`
   recognizes the following protocols: ``TLS1_0``, ``TLS1_1``, and
   ``TLS1_2``. Specifying an unrecognized protocol will prevent the
   server from starting.
   
   To specify multiple protocols, use a comma separated list of
   protocols.
   
   Members of replica sets and sharded clusters must speak at least one
   protocol in common.
   
   .. seealso:: :ref:`ssl-disallow-protocols`


.. setting:: net.ssl.FIPSMode

   *Type*: boolean

   Enable or disable the use of the FIPS mode of the installed OpenSSL
   library for the :binary:`~bin.mongos` or :binary:`~bin.mongod`. Your system must have a FIPS
   compliant OpenSSL library to use the :setting:`net.ssl.FIPSMode` option.
   
   .. include:: /includes/note-fips-is-enterprise-only.rst


``security`` Options
~~~~~~~~~~~~~~~~~~~~

.. code-block:: yaml

   security:
      keyFile: <string>
      clusterAuthMode: <string>
      authorization: <string>
      javascriptEnabled:  <boolean>
      sasl:
         hostName: <string>
         serviceName: <string>
         saslauthdSocketPath: <string>
      enableEncryption: <boolean>
      encryptionCipherMode: <string>
      encryptionKeyFile: <string>
      kmip:
         keyIdentifier: <string>
         rotateMasterKey: <boolean>
         serverName: <string>
         port: <string>
         clientCertificateFile: <string>
         clientCertificatePassword: <string>
         serverCAFile: <string>

.. setting:: security.keyFile

   *Type*: string

   The path to a key file that stores the shared secret
   that MongoDB instances use to authenticate to each other in a
   :term:`sharded cluster` or :term:`replica set`. :setting:`~security.keyFile` implies
   :setting:`security.authorization`. See :ref:`inter-process-auth` for more
   information.


.. setting:: security.clusterAuthMode

   *Type*: string

   *Default*: keyFile

   .. versionadded:: 2.6
   
   The authentication mode used for cluster authentication. If you use
   :ref:`internal x.509 authentication <x509-internal-authentication>`,
   specify so here. This option can have one of the following values:
   
   .. list-table::
      :header-rows: 1
      :widths: 20 40
   
      * - Value
   
        - Description
   
      * - ``keyFile``
   
        - Use a keyfile for authentication.
          Accept only keyfiles.
   
      * - ``sendKeyFile``
   
        - For rolling upgrade purposes. Send a keyfile for
          authentication but can accept both keyfiles and x.509
          certificates.
   
      * - ``sendX509``
   
        - For rolling upgrade purposes. Send the x.509 certificate for
          authentication but can accept both keyfiles and x.509
          certificates.
   
      * - ``x509``
   
        - Recommended. Send the x.509 certificate for authentication and
          accept only x.509 certificates.
   
   .. include:: /includes/extracts/ssl-facts-x509-ca-file.rst
   
   .. include:: /includes/extracts/ssl-facts-see-more.rst
   


.. setting:: security.authorization

   *Type*: string

   *Default*: disabled

   Enable or disable Role-Based Access Control (RBAC) to govern each
   user's access to database resources and operations.
   
   Set this option to one of the following:
   
   .. list-table::
      :header-rows: 1
      :widths: 20 40
   
      * - Value
   
        - Description
   
      * - ``enabled``
   
        - A user can access only the database resources and actions for
          which they have been granted privileges.
   
      * - ``disabled``
   
        - A user can access any database and perform any action.
   
   See :doc:`/core/authorization` for more information.
   

   The :setting:`security.authorization` setting is available only for :binary:`~bin.mongod`.


.. setting:: security.javascriptEnabled

   *Type*: boolean

   *Default*: true

   Enables or disables the :doc:`server-side JavaScript execution
   </core/server-side-javascript>`. When disabled, you cannot use
   operations that perform server-side execution of JavaScript code,
   such as the :query:`$where` query operator, :dbcommand:`mapReduce`
   command and the :method:`db.collection.mapReduce()` method,
   :dbcommand:`group` command and the :method:`db.collection.group()`
   method.
   


.. _encryption-key-management-conf-options:

Key Management Configuration Options
````````````````````````````````````

.. code-block:: yaml

   security:
      enableEncryption: <boolean>
      encryptionCipherMode: <string>
      encryptionKeyFile: <string>
      kmip:
         keyIdentifier: <string>
         rotateMasterKey: <boolean>
         serverName: <string>
         port: <string>
         clientCertificateFile: <string>
         clientCertificatePassword: <string>
         serverCAFile: <string>

.. setting:: security.enableEncryption

   *Type*: boolean

   *Default*: false

   
   .. versionadded:: 3.2
   
    Enables encryption for the WiredTiger storage engine. You must set
    to ``true`` to pass in encryption keys and configurations.
   
   .. include:: /includes/fact-enterprise-only-admonition.rst
   


.. setting:: security.encryptionCipherMode

   *Type*: string

   *Default*: ``AES256-CBC``

   
   .. versionadded:: 3.2
   
   The cipher mode to use for encryption at rest:
   
   .. list-table::
      :header-rows: 1
      :widths: 35 65
   
      * - Mode
        - Description
   
      * - ``AES256-CBC``
        - 256-bit Advanced Encryption Standard in Cipher Block Chaining
          Mode
   
      * - ``AES256-GCM``
   
        - 256-bit Advanced Encryption Standard in Galois/Counter Mode
   
   .. include:: /includes/fact-enterprise-only-admonition.rst
   


.. setting:: security.encryptionKeyFile

   *Type*: string

   
   .. versionadded:: 3.2
   
   The path to the local keyfile when managing keys via process *other
   than* KMIP. Only set when managing keys via process other than KMIP.
   If data is already encrypted using KMIP, MongoDB will throw an error.
   
   Requires :setting:`security.enableEncryption` to be ``true``.
   
   .. include:: /includes/fact-enterprise-only-admonition.rst
   


.. setting:: security.kmip.keyIdentifier

   *Type*: string

   
   .. versionadded:: 3.2
   
   Unique KMIP identifier for an existing key within the KMIP server.
   Include to use the key associated with the identifier as the system
   key. You can only use the setting the first time you enable
   encryption for the :binary:`~bin.mongod` instance. Requires
   :setting:`security.enableEncryption` to be true.
   
   If unspecified, MongoDB will request that the KMIP server create a
   new key to utilize as the system key.
   
   If the KMIP server cannot locate a key with the specified identifier
   or the data is already encrypted with a key, MongoDB will throw an
   error.
   
   .. include:: /includes/fact-enterprise-only-admonition.rst
   


.. setting:: security.kmip.rotateMasterKey

   *Type*: boolean

   *Default*: false

   
   .. versionadded:: 3.2
   
   If true, rotate the master key and re-encrypt the internal
   keystore.
   
   .. include:: /includes/fact-enterprise-only-admonition.rst
   
   .. seealso:: :ref:`kmip-master-key-rotation`
   


.. setting:: security.kmip.serverName

   *Type*: string

   
   .. versionadded:: 3.2
   
   Hostname or IP address of key management solution running a KMIP
   server. Requires :setting:`security.enableEncryption` to be true.
   
   .. include:: /includes/fact-enterprise-only-admonition.rst
   


.. setting:: security.kmip.port

   *Type*: string

   *Default*: 5696

   
   .. versionadded:: 3.2
   
   Port number the KMIP server is listening on. Requires that a
   :setting:`security.kmip.serverName` be provided. Requires
   :setting:`security.enableEncryption` to be true.
   
   .. include:: /includes/fact-enterprise-only-admonition.rst
   


.. setting:: security.kmip.clientCertificateFile

   *Type*: string

   
   .. versionadded:: 3.2
   
   String containing the path to the client certificate used for
   authenticating MongoDB to the KMIP server. Requires that a
   :setting:`security.kmip.serverName` be provided.
   
   .. include:: /includes/fact-enterprise-only-admonition.rst
   


.. setting:: security.kmip.clientCertificatePassword

   *Type*: string

   
   .. versionadded:: 3.2
   
   The password to decrypt the client certificate (i.e.
   :setting:`security.kmip.clientCertificateFile`), used to
   authenticate MongoDB to the KMIP server. Use the option only if the
   certificate is encrypted.
   
   .. include:: /includes/fact-enterprise-only-admonition.rst
   


.. setting:: security.kmip.serverCAFile

   *Type*: string

   
   .. versionadded:: 3.2
   
   Path to CA File. Used for validating secure client connection to
   KMIP server.
   
   .. include:: /includes/fact-enterprise-only-admonition.rst
   


``security.sasl`` Options
`````````````````````````

.. code-block:: yaml

   security:
      sasl:
         hostName: <string>
         serviceName: <string>
         saslauthdSocketPath: <string>

.. setting:: security.sasl.hostName

   *Type*: string

   A fully qualified server domain name for the purpose of configuring SASL
   and Kerberos authentication. The SASL hostname overrides the hostname
   only for the configuration of SASL and Kerberos.
   
   For :binary:`~bin.mongo` shell and other MongoDB tools to connect to
   the new :setting:`~security.sasl.hostName`, see the
   ``gssapiHostName`` option in the :binary:`~bin.mongo` shell and other
   tools.
   


.. setting:: security.sasl.serviceName

   *Type*: string

   Registered name of the service using SASL. This option allows you to
   override the default :doc:`Kerberos
   </tutorial/control-access-to-mongodb-with-kerberos-authentication>`
   service name component of the :doc:`Kerberos
   </tutorial/control-access-to-mongodb-with-kerberos-authentication>`
   principal name, on a per-instance basis. If unspecified, the default
   value is ``mongodb``.
   
   MongoDB permits setting this option only at startup. The
   :dbcommand:`setParameter` can not change this setting.
   
   This option is available only in MongoDB Enterprise.
   
   .. important:: Ensure that your driver supports alternate service names.
      For :binary:`~bin.mongo` shell and other MongoDB tools to connect to the
      new :setting:`~security.sasl.serviceName`, see the
      ``gssapiServiceName`` option.
   


.. setting:: security.sasl.saslauthdSocketPath

   *Type*: string

   The path to the UNIX domain socket file for ``saslauthd``.
   


``setParameter`` Option
~~~~~~~~~~~~~~~~~~~~~~~

.. setting:: setParameter

   Set MongoDB parameter or parameters described in
   :doc:`/reference/parameters`
   
   To set parameters in the YAML configuration file, use the following
   format:
   
   .. code-block:: yaml
   
      setParameter:
         <parameter1>: <value1>
         <parameter2>: <value2>
   
   For example, to specify the :parameter:`enableLocalhostAuthBypass` in
   the configuration file:
   
   .. code-block:: yaml
   
      setParameter:
         enableLocalhostAuthBypass: false
   


``storage`` Options
~~~~~~~~~~~~~~~~~~~

.. code-block:: yaml

   storage:
      dbPath: <string>
      indexBuildRetry: <boolean>
      repairPath: <string>
      journal:
         enabled: <boolean>
         commitIntervalMs: <num>
      directoryPerDB: <boolean>
      syncPeriodSecs: <int>
      engine: <string>
      mmapv1:
         preallocDataFiles: <boolean>
         nsSize: <int>
         quota:
            enforced: <boolean>
            maxFilesPerDB: <int>
         smallFiles: <boolean>
         journal:
            debugFlags: <int>
            commitIntervalMs: <num>
      wiredTiger:
         engineConfig:
            cacheSizeGB: <number>
            journalCompressor: <string>
            directoryForIndexes: <boolean>
         collectionConfig:
            blockCompressor: <string>
         indexConfig:
            prefixCompression: <boolean>
      inMemory:
         engineConfig:
            inMemorySizeGB: <number>

.. setting:: storage.dbPath

   *Type*: string

   *Default*: ``/data/db`` on Linux and macOS, ``\data\db`` on Windows

   The directory where the :binary:`~bin.mongod` instance stores its data.
   
   If you
   installed MongoDB using a package management system, check the
   ``/etc/mongod.conf`` file provided by your packages to see the
   directory is specified.

   The :setting:`storage.dbPath` setting is available only for :binary:`~bin.mongod`.
   
   .. include:: /includes/extracts/linux-config-expectations-storage-dbpath.rst


.. setting:: storage.indexBuildRetry

   *Type*: boolean

   *Default*: true

   Specifies whether :binary:`~bin.mongod` rebuilds incomplete indexes on the
   next start up. This applies in cases where :binary:`~bin.mongod` restarts
   after it has shut down or stopped in the middle of an index build. In
   such cases, :binary:`~bin.mongod` always removes any incomplete indexes,
   and then, by default, attempts to rebuild them. To stop :binary:`~bin.mongod`
   from rebuilding indexes, set this option to ``false``.
   

   The :setting:`storage.indexBuildRetry` setting is available only for :binary:`~bin.mongod`.
   
   .. include:: /includes/not-available-for-inmemory-storage-engine.rst


.. setting:: storage.repairPath

   *Type*: string

   *Default*: A ``_tmp_repairDatabase_<num>`` directory under the
   :setting:`~storage.dbPath`.

   The working directory that MongoDB will use during the
   :option:`--repair <mongod --repair>` operation. When ``--repair`` completes, the
   :setting:`storage.repairPath` directory is empty, and
   :setting:`~storage.dbPath` contains the repaired files.

   The :setting:`storage.repairPath` setting is available only for :binary:`~bin.mongod`.
   
   Only available for :binary:`~bin.mongod` instance using the MMAPv1 storage engine.


.. setting:: storage.journal.enabled

   *Type*: boolean

   *Default*: ``true`` on 64-bit systems, ``false`` on 32-bit systems

   Enable or disable the durability :term:`journal` to ensure data files remain valid
   and recoverable. This option applies only when you specify the
   :setting:`storage.dbPath` setting. The :binary:`~bin.mongod` enables journaling by default
   on 64-bit builds of versions after 2.0.

   The :setting:`storage.journal.enabled` setting is available only for :binary:`~bin.mongod`.
   
   .. include:: /includes/not-available-for-inmemory-storage-engine.rst


.. setting:: storage.journal.commitIntervalMs

   *Type*: number

   *Default*: 100 or 30

   
   .. versionadded:: 3.2
   
   The maximum amount of time in milliseconds that
   the :binary:`~bin.mongod` process allows between
   journal operations. Values can range from 1 to 500 milliseconds. Lower
   values increase the durability of the journal, at the expense of disk
   performance. The default journal commit interval is 100 milliseconds.
   
   On MMAPv1, if the journal is on a different block device (e.g. physical
   volume, RAID device, or LVM volume) than the data files, the default journal
   commit interval is 30 milliseconds. Additionally, on MMAPv1, when a write
   operation with ``j:true`` is pending, :binary:`~bin.mongod` will reduce
   :setting:`~storage.journal.commitIntervalMs` to a third of the set value.
   
   On WiredTiger, the default journal commit interval is 100 milliseconds. Additionally,
   a write with ``j:true`` will cause an immediate sync of the journal.

   The :setting:`storage.journal.commitIntervalMs` setting is available only for :binary:`~bin.mongod`.
   
   .. include:: /includes/not-available-for-inmemory-storage-engine.rst


.. setting:: storage.directoryPerDB

   *Type*: boolean

   *Default*: false

   When ``true``, MongoDB uses a separate directory to store data for each database. The
   directories are under the :setting:`storage.dbPath` directory, and each subdirectory
   name corresponds to the database name.
   
   .. versionchanged:: 3.0
   
      To change the :setting:`storage.directoryPerDB` option for existing deployments, you must
      restart the :binary:`~bin.mongod` instances with the new :setting:`storage.directoryPerDB`
      value **and** a new data directory (:setting:`storage.dbPath` value), and then
      repopulate the data.
   
      - For standalone instances, you can use :binary:`~bin.mongodump` on
        the existing instance, stop the instance, restart with the new
        :setting:`storage.directoryPerDB` value **and** a new data directory, and use
        :binary:`~bin.mongorestore` to populate the new data directory.
   
      - For replica sets, you can update in a rolling manner by stopping
        a secondary member, restart with the new :setting:`storage.directoryPerDB` value **and**
        a new data directory, and use :ref:`initial sync
        <replica-set-initial-sync>` to populate the new data directory.
        To update all members, start with the secondary members first.
        Then step down the primary, and update the stepped-down member.

   The :setting:`storage.directoryPerDB` setting is available only for :binary:`~bin.mongod`.
   
   .. include:: /includes/not-available-for-inmemory-storage-engine.rst


.. setting:: storage.syncPeriodSecs

   *Type*: number

   *Default*: 60

   The amount of time that can pass before MongoDB flushes data to the data
   files via an :term:`fsync` operation.
   
   **Do not set this value on
   production systems.** In almost every situation, you should use the
   default setting.
   
   .. warning::
   
      If you set :setting:`storage.syncPeriodSecs` to ``0``, MongoDB will not sync the
      memory mapped files to disk.
   
   The :binary:`~bin.mongod` process writes data very quickly to the journal and
   lazily to the data files. :setting:`storage.syncPeriodSecs` has no effect on the
   :setting:`journal <storage.journal.enabled>` files or :doc:`journaling </core/journaling>`,
   but if :setting:`storage.syncPeriodSecs` is set to ``0`` the journal will eventually consume
   all available disk space. If you set :setting:`storage.syncPeriodSecs` to ``0`` for testing
   purposes, you should also set :option:`--nojournal <mongod --nojournal>`
   to ``true``.
   
   The :dbcommand:`serverStatus` command reports the background flush
   thread's status via the :serverstatus:`backgroundFlushing` field.

   The :setting:`storage.syncPeriodSecs` setting is available only for :binary:`~bin.mongod`.
   
   .. include:: /includes/not-available-for-inmemory-storage-engine.rst


.. setting:: storage.engine

   *Default*: ``wiredTiger``

   .. versionadded:: 3.0
   
   .. versionchanged:: 3.2
   
      Starting in MongoDB 3.2, ``wiredTiger`` is the default.
   
   The storage engine for the :binary:`~bin.mongod` database. Available
   values include:
   
   .. list-table::
      :header-rows: 1
      :widths: 20 80
   
      * - Value
        - Description
   
      * - ``mmapv1``
        - To specify the :doc:`/core/mmapv1`.
   
      * - ``wiredTiger``
        - To specify the :doc:`/core/wiredtiger`.
   
      * - ``inMemory``
   
        - To specify the :doc:`/core/inmemory`.
   
          .. versionadded:: 3.2
             Available in MongoDB Enterprise only.

   If you attempt to start a :binary:`~bin.mongod` with a
   :setting:`storage.dbPath` that contains data files produced by a
   storage engine other than the one specified by :setting:`storage.engine`, :binary:`~bin.mongod`
   will refuse to start.


``storage.mmapv1`` Options
``````````````````````````

.. code-block:: yaml

   storage:
      mmapv1:
         preallocDataFiles: <boolean>
         nsSize: <int>
         quota:
            enforced: <boolean>
            maxFilesPerDB: <int>
         smallFiles: <boolean>
         journal:
            debugFlags: <int>
            commitIntervalMs: <num>

.. setting:: storage.mmapv1.preallocDataFiles

   *Type*: boolean

   *Default*: true

   Enables or disables the preallocation of data files. By default, MongoDB
   does not preallocate data files. 
   

   The :setting:`storage.mmapv1.preallocDataFiles` setting is available only for :binary:`~bin.mongod`.


.. setting:: storage.mmapv1.nsSize

   *Type*: integer

   *Default*: 16

   The default size for namespace files, which are files that end
   in ``.ns``. Each collection and index counts as a namespace.
   
   Use this setting to control size for newly created namespace files. This
   option has no impact on existing files. The maximum size for a namespace
   file is 2047 megabytes. The default value of 16 megabytes provides for
   approximately 24,000 namespaces.

   The :setting:`storage.mmapv1.nsSize` setting is available only for :binary:`~bin.mongod`.


.. setting:: storage.mmapv1.quota.enforced

   *Type*: Boolean

   *Default*: false

   Enable or disable the enforcement of a maximum limit for the number data files each database can
   have. When running with the :setting:`storage.mmapv1.quota.enforced` option, MongoDB has a maximum of 8
   data files per database. Adjust the quota with
   :setting:`storage.quota.maxFilesPerDB`.

   The :setting:`storage.mmapv1.quota.enforced` setting is available only for :binary:`~bin.mongod`.


.. setting:: storage.mmapv1.quota.maxFilesPerDB

   *Type*: integer

   *Default*: 8

   The limit on the number of data files per database. :setting:`storage.mmapv1.quota.maxFilesPerDB`
   option requires that you set :setting:`storage.quota.enforced`.

   The :setting:`storage.mmapv1.quota.maxFilesPerDB` setting is available only for :binary:`~bin.mongod`.


.. setting:: storage.mmapv1.smallFiles

   *Type*: boolean

   *Default*: false

   When ``true``, MongoDB uses a smaller default file size. The :setting:`storage.mmapv1.smallFiles` option
   reduces the initial size for data files and limits the maximum size to
   512 megabytes. :setting:`storage.mmapv1.smallFiles` also reduces the size of each :term:`journal`
   file from 1 gigabyte to 128 megabytes. Use :setting:`storage.mmapv1.smallFiles` if you have a large
   number of databases that each holds a small quantity of data.
   
   The :setting:`storage.mmapv1.smallFiles` option can lead the :binary:`~bin.mongod` instance to create a large
   number of files, which can affect performance for larger databases.

   The :setting:`storage.mmapv1.smallFiles` setting is available only for :binary:`~bin.mongod`.


.. setting:: storage.mmapv1.journal.debugFlags

   *Type*: integer

   Provides functionality for testing. Not for general use, and will affect data
   file integrity in the case of abnormal system shutdown.
   

   The :setting:`storage.mmapv1.journal.debugFlags` option is available only for :binary:`~bin.mongod`.


.. setting:: storage.mmapv1.journal.commitIntervalMs

   *Type*: number

   .. deprecated:: 3.2
   
      MongoDB 3.2 deprecates the
      :setting:`storage.mmapv1.journal.commitIntervalMs` setting. Use
      :setting:`storage.journal.commitIntervalMs` instead. 
   
      The deprecated setting acts as an alias to the new
      :setting:`storage.journal.commitIntervalMS` setting and applies to
      either the MMAPv1 or the WiredTiger storage engine.
   



``storage.wiredTiger`` Options
``````````````````````````````

.. code-block:: yaml

   storage:
      wiredTiger:
         engineConfig:
            cacheSizeGB: <number>
            journalCompressor: <string>
            directoryForIndexes: <boolean>
         collectionConfig:
            blockCompressor: <string>
         indexConfig:
            prefixCompression: <boolean>

.. setting:: storage.wiredTiger.engineConfig.cacheSizeGB

   *Type*: float

   
   .. versionadded:: 3.0
   
   The maximum size of the internal cache that WiredTiger will
   use for all data.
   
   .. include:: /includes/extracts/wt-cache-default-setting.rst
   
   Avoid increasing the WiredTiger internal cache size above its
   default value.

   .. include:: /includes/extracts/wt-cache-additional-constraints-mongod-config.rst
   


.. setting:: storage.wiredTiger.engineConfig.journalCompressor

   *Default*: snappy

   
   .. versionadded:: 3.0.0
   
   The type of compression to use to compress WiredTiger
   journal data.
   
   Available compressors are:
   
   - ``none``
   
   - :term:`snappy`
   
   - :term:`zlib`


.. setting:: storage.wiredTiger.engineConfig.directoryForIndexes

   *Type*: boolean

   *Default*: false

   .. versionadded:: 3.0.0
   
   When :setting:`storage.wiredTiger.engineConfig.directoryForIndexes` is ``true``, :binary:`~bin.mongod` stores indexes and collections in separate
   subdirectories under the data (i.e. :setting:`storage.dbPath`) directory.
   Specifically, :binary:`~bin.mongod` stores the indexes in a subdirectory named
   ``index`` and the collection data in a subdirectory named
   ``collection``.
   
   By using a symbolic link, you can specify a different location for
   the indexes. Specifically, when :binary:`~bin.mongod` instance is **not**
   running, move the ``index`` subdirectory to the destination and
   create a symbolic link named ``index`` under the data directory to
   the new destination.


.. setting:: storage.wiredTiger.collectionConfig.blockCompressor

   *Default*: snappy

   
   .. versionadded:: 3.0.0
   
   The default type of compression to use to compress collection
   data. You can override this on a per-collection basis when creating
   collections.
   
   Available compressors are:
   
   - ``none``
   
   - :term:`snappy`
   
   - :term:`zlib`
   
   :setting:`storage.wiredTiger.collectionConfig.blockCompressor` affects all collections created. If you change
   the value of :setting:`storage.wiredTiger.collectionConfig.blockCompressor` on an existing MongoDB deployment, all new
   collections will use the specified compressor. Existing collections
   will continue to use the compressor specified when they were
   created, or the default compressor at that time.


.. setting:: storage.wiredTiger.indexConfig.prefixCompression

   *Default*: true

   
   .. versionadded:: 3.0.0
   
   Enables or disables :term:`prefix compression` for index data.
   
   Specify ``true`` for :setting:`storage.wiredTiger.indexConfig.prefixCompression` to enable :term:`prefix compression` for
   index data, or ``false`` to disable prefix compression for index data.
   
   The :setting:`storage.wiredTiger.indexConfig.prefixCompression` setting affects all indexes created. If you change
   the value of :setting:`storage.wiredTiger.indexConfig.prefixCompression` on an existing MongoDB deployment, all new
   indexes will use prefix compression. Existing indexes
   are not affected.


``storage.inmemory`` Options
````````````````````````````

.. code-block:: yaml

   storage:
      inMemory:
         engineConfig:
            inMemorySizeGB: <number>

.. setting:: storage.inMemory.engineConfig.inMemorySizeGB

   *Type*: float

   *Default*: 50% of physical RAM less 1 GB

   .. versionadded:: 3.2
   
   Maximum amount of memory to allocate for :doc:`in-memory storage
   engine </core/inmemory>` data, including indexes, oplog if the
   :binary:`~bin.mongod` is part of replica set, replica set or sharded
   cluster metadata, etc.
   
   .. include:: /includes/fact-inmemory-storage-engine-default-ram.rst
   
   .. include:: /includes/fact-enterprise-only-admonition.rst
   


``operationProfiling`` Options
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: yaml

   operationProfiling:
      slowOpThresholdMs: <int>
      mode: <string>

.. setting:: operationProfiling.slowOpThresholdMs

   *Type*: integer

   *Default*: 100

   The threshold in milliseconds at which the database profiler considers a
   query slow. MongoDB records all slow queries to the log, even when the
   database profiler is off. When the profiler is on, it writes to the
   ``system.profile`` collection. See the :dbcommand:`profile` command for
   more information on the database profiler.
   

   The :setting:`operationProfiling.slowOpThresholdMs` setting is available only for :binary:`~bin.mongod`.


.. setting:: operationProfiling.mode

   *Type*: string

   *Default*: off

   The level of database profiling, which inserts information about
   operation performance into the ``system.profile`` collection. Specify one
   of the following levels:
   
   .. list-table::
      :header-rows: 1
      :widths: 20 40
   
      * - Level
   
        - Setting
   
      * - ``off``
   
        - Off. No profiling.
   
      * - ``slowOp``
   
        - On. Only includes slow operations.
   
      * - ``all``
   
        - On. Includes all operations.
   
   Database profiling can impact database
   performance. Enable this option only after careful consideration.

   The :setting:`operationProfiling.mode` setting is available only for :binary:`~bin.mongod`.


``replication`` Options
~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: yaml

   replication:
      oplogSizeMB: <int>
      replSetName: <string>
      secondaryIndexPrefetch: <string>
      enableMajorityReadConcern: <boolean>

.. setting:: replication.oplogSizeMB

   *Type*: integer

   The maximum size in megabytes for the replication operation log
   (i.e., the :term:`oplog`). The :binary:`~bin.mongod` process creates an
   :term:`oplog` based on the maximum amount of space available. For 64-bit
   systems, the oplog is typically 5% of available disk space. Once the
   :binary:`~bin.mongod` has created the oplog for the first time, changing the
   :setting:`replication.oplogSizeMB` option will not affect the size of the oplog.
   
   See :ref:`replica-set-oplog-sizing` for more information.

   The :setting:`replication.oplogSizeMB` setting is available only for :binary:`~bin.mongod`.


.. setting:: replication.replSetName

   *Type*: string

   The name of the replica set that the :binary:`~bin.mongod` is part of. All hosts
   in the replica set must have the same set name.
   
   .. include:: /includes/fact-unique-replica-set-names.rst

   The :setting:`replication.replSetName` setting is available only for :binary:`~bin.mongod`.


.. setting:: replication.secondaryIndexPrefetch

   *Type*: string

   *Default*: all

   .. |feature| replace:: :setting:`replication.secondaryIndexPrefetch`
   .. include:: /includes/fact-feature-is-mmapv1-only.rst
   
   The indexes that :term:`secondary` members of a :term:`replica
   set` load into memory before applying operations from the oplog. By
   default secondaries load all indexes related to an operation into memory
   before applying operations from the oplog.
   
   Set this setting to one of the following:
   
   .. list-table::
      :header-rows: 1
      :widths: 20 40
   
      * - Value
   
        - Description
   
      * - ``none``
   
        - Secondaries do not load indexes into memory.
   
      * - ``all``
   
        - Secondaries load all indexes related to an operation.
   
      * - ``_id_only``
   
        - Secondaries load no additional indexes into memory beyond the
          already existing ``_id`` index.

   The :setting:`replication.secondaryIndexPrefetch` setting is available only for :binary:`~bin.mongod`.


.. setting:: replication.enableMajorityReadConcern

   *Type*: boolean

   *Default*: false

   
   .. versionadded:: 3.2
   
   Enables :term:`read concern` level of ``"majority"``.
   


``sharding`` Options
~~~~~~~~~~~~~~~~~~~~

.. code-block:: yaml

   sharding:
      clusterRole: <string>
      archiveMovedChunks: <boolean>

.. setting:: sharding.clusterRole

   *Type*: string

   The role that the :binary:`~bin.mongod` instance has in the sharded
   cluster. Set this setting to one of the following:
   
   .. list-table::
      :header-rows: 1
      :widths: 20 40
   
      * - Value
   
        - Description
   
      * - ``configsvr``
   
        - Start this instance as a :term:`config server`. The instance
          starts on port ``27019`` by default.
   
      * - ``shardsvr``
   
        - Start this instance as a :term:`shard`. The instance starts
          on port ``27018`` by default.
   

   The :setting:`sharding.clusterRole` setting is available only for :binary:`~bin.mongod`.


.. setting:: sharding.archiveMovedChunks

   *Type*: boolean

   .. versionchanged:: 3.2
      Starting in 3.2, MongoDB uses ``false`` as the default.
   
   During chunk migration, a shard does not save documents migrated from
   the shard.


``auditLog`` Options
~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/note-audit-in-enterprise-only.rst

.. code-block:: yaml

   auditLog:
      destination: <string>
      format: <string>
      path: <string>
      filter: <string>

.. setting:: auditLog.destination

   *Type*: string

   .. versionadded:: 2.6
   
   When set, :setting:`auditLog.destination` enables :doc:`auditing </core/auditing>` and
   specifies where :binary:`~bin.mongos` or :binary:`~bin.mongod` sends all audit events.

   :setting:`auditLog.destination` can have one of the following values:
   
   .. list-table::
      :header-rows: 1
      :widths: 15 50
   
      * - Value
   
        - Description
   
      * - ``syslog``
   
        - Output the audit events to syslog in JSON format. Not available on
          Windows. Audit messages have a syslog severity level of ``info``
          and a facility level of ``user``.
   
          The syslog message limit can result in the truncation of
          audit messages. The auditing system will neither detect the
          truncation nor error upon its occurrence.
   
      * - ``console``
   
        - Output the audit events to ``stdout`` in JSON format.
   
      * - ``file``
   
        - Output the audit events to the file specified in
          :setting:`auditLog.path` in the format specified in
          :setting:`auditLog.format`.
   
   .. include:: /includes/note-audit-in-enterprise-only.rst


.. setting:: auditLog.format

   *Type*: string

   .. versionadded:: 2.6
   
   The format of the output file for :doc:`auditing
   </core/auditing>` if :setting:`~auditLog.destination` is ``file``. The
   :setting:`auditLog.format` option can have one of the following values:
   
   .. list-table::
      :header-rows: 1
      :widths: 15 50
   
      * - Value
   
        - Description
   
      * - ``JSON``
   
        - Output the audit events in JSON format to the file specified
          in :setting:`auditLog.path`.
   
      * - ``BSON``
   
        - Output the audit events in BSON binary format to the file
          specified in :setting:`auditLog.path`.
   
   Printing audit events to a file in JSON format degrades server
   performance more than printing to a file in BSON format.
   
   .. include:: /includes/note-audit-in-enterprise-only.rst


.. setting:: auditLog.path

   *Type*: string

   .. versionadded:: 2.6
   
   The output file for :doc:`auditing </core/auditing>` if
   :setting:`~auditLog.destination` has value of ``file``. The :setting:`auditLog.path`
   option can take either a full path name or a relative path name.
   
   .. include:: /includes/note-audit-in-enterprise-only.rst


.. setting:: auditLog.filter

   *Type*: string representation of a document

   .. versionadded:: 2.6
   
   The filter to limit the :ref:`types of operations
   <audit-action-details-results>` the :doc:`audit system
   </core/auditing>` records. The option takes a string representation
   of a query document of the form:
   
   .. code-block:: javascript
   
      { <field1>: <expression1>, ... }
   
   The ``<field>`` can be :doc:`any field in the audit message
   </reference/audit-message>`, including fields returned in the
   :ref:`param <audit-action-details-results>` document. The
   ``<expression>`` is a :ref:`query condition expression
   <query-selectors>`.
   
   .. include:: /includes/fact-audit-filter-single-quotes.rst
   
   .. include:: /includes/fact-audit-filter-yaml-configuration.rst
   
   .. include:: /includes/note-audit-in-enterprise-only.rst


``snmp`` Options
~~~~~~~~~~~~~~~~

.. note::

   .. include:: /includes/fact-macos-snmp.rst

.. code-block:: yaml

   snmp:
      subagent: <boolean>
      master: <boolean>

.. setting:: snmp.subagent

   *Type*: boolean

   When :setting:`snmp.subagent` is ``true``, SNMP runs as a subagent. For more information, see
   :doc:`/tutorial/monitor-with-snmp`.

   The :setting:`snmp.subagent` setting is available only for :binary:`~bin.mongod`.


.. setting:: snmp.master

   *Type*: boolean

   When :setting:`snmp.master` is ``true``, SNMP runs as a master. For more information, see
   :doc:`/tutorial/monitor-with-snmp`.

   The :setting:`snmp.master` setting is available only for :binary:`~bin.mongod`.


``mongos``\ -only Options
-------------------------

.. code-block:: yaml

   replication:
      localPingThresholdMs: <int>

   sharding:
      autoSplit: <boolean>
      configDB: <string>
      chunkSize: <int>

.. setting:: replication.localPingThresholdMs

   *Type*: integer

   *Default*: 15

   The ping time, in milliseconds, that :binary:`~bin.mongos` uses
   to determine which secondary replica set members to pass read
   operations from clients. The default value of ``15`` corresponds to
   the default value in all of the client :ecosystem:`drivers
   </drivers>`.
   
   When :binary:`~bin.mongos` receives a request that permits reads to
   :term:`secondary` members, the :binary:`~bin.mongos` will:
   
   - Find the member of the set with the lowest ping time.
   
   - Construct a list of replica set members that is within a ping time of
     15 milliseconds of the nearest suitable member of the set.
   
     If you specify a value for the :setting:`replication.localPingThresholdMs` option, :binary:`~bin.mongos` will
     construct the list of replica members that are within the latency
     allowed by this value.
   
   - Select a member to read from at random from this list.
   
   The ping time used for a member compared by the :setting:`replication.localPingThresholdMs` setting is a
   moving average of recent ping times, calculated at most every 10
   seconds. As a result, some queries may reach members above the threshold
   until the :binary:`~bin.mongos` recalculates the average.
   
   See the :ref:`replica-set-read-preference-behavior-member-selection`
   section of the :doc:`read preference </core/read-preference>`
   documentation for more information.


.. setting:: sharding.autoSplit

   *Type*: boolean

   *Default*: true

   Enables or disables the automatic splitting of chunks for
   :term:`sharded collections <sharding>`. If :setting:`sharding.autoSplit` is ``false`` on
   all :binary:`~bin.mongos` instances, MongoDB does not create new chunks as the
   data in a collection grows.
   
   Because any :binary:`~bin.mongos` in a cluster can create a split,
   to totally disable splitting in a cluster, you must set :setting:`sharding.autoSplit`
   to ``false`` on all :binary:`~bin.mongos`.

   
   .. warning::
   
      With auto-splitting disabled, the data in your sharded
      cluster may become imbalanced over time. Disable with caution.
   


.. setting:: sharding.configDB

   *Type*: string

   
   .. versionchanged:: 3.2
   
   The :ref:`configuration servers <sharding-config-server>` for the
   :term:`sharded cluster`. 
   
   .. include:: /includes/fact-mirrored-config-servers-deprecated.rst
   
   Specify the config server replica set name and the hostname and port of
   at least one of the members of the config server replica set.
   
   .. code-block:: javascript
   
      sharding:
        configDB: <configReplSetName>/cfg1.example.net:27017, cfg2.example.net:27017,...
   
   The :binary:`~bin.mongos` instances for the sharded cluster must specify
   the same config server replica set name but can specify hostname and
   port of different members of the replica set.
   
   If using the deprecated mirrored instances, specify the hostnames and
   ports of the three :binary:`~bin.mongod` instances. The :binary:`~bin.mongos`
   instances must specify the same config string.


.. setting:: sharding.chunkSize

   *Type*: integer

   *Default*: 64

   The size in megabytes of each :term:`chunk` in the
   :term:`sharded cluster`. A size of 64 megabytes is ideal in most
   deployments: larger chunk size can lead to uneven data distribution;
   smaller chunk size can lead to inefficient movement of chunks between
   nodes.
   
   :setting:`sharding.chunkSize` affects chunk size *only* when you initialize the cluster
   for the first time. If you later modify the option, the new value has no
   effect. See the :doc:`/tutorial/modify-chunk-size-in-sharded-cluster`
   procedure if you need to change the chunk size on an existing sharded
   cluster.


.. setting:: sharding.configsvrMode

   *Type*: string

   **Available in MongoDB 3.2 version only**
   
   If set to ``sccc``, indicates that the config servers are deployed
   as three mirrored :binary:`~bin.mongod` instances, even if one or more
   config servers is also a member of a replica set. ``configsvrMode``
   only accepts the value ``sccc``.
   
   If unset, config servers running as replica sets expect to use the
   "config server replica set" protocol for writing to config servers,
   rather than the "mirrored mongod" write protocol.
   


Windows Service Options
-----------------------

.. code-block:: yaml

   processManagement:
      windowsService:
         serviceName: <string>
         displayName: <string>
         description: <string>
         serviceUser: <string>
         servicePassword: <string>

.. setting:: processManagement.windowsService.serviceName

   *Type*: string

   *Default*: MongoDB

   The service name of :binary:`~bin.mongos` or :binary:`~bin.mongod` when running as a
   Windows Service. Use this name with the ``net start <name>`` and
   ``net stop <name>`` operations.

   You must use :setting:`processManagement.windowsService.serviceName` in conjunction with either
   the ``--install`` or ``--remove`` option.


.. setting:: processManagement.windowsService.displayName

   *Type*: string

   *Default*: MongoDB

   The name listed for MongoDB on the Services administrative
   application.


.. setting:: processManagement.windowsService.description

   *Type*: string

   *Default*: MongoDB Server

   Run :binary:`~bin.mongos` or :binary:`~bin.mongod` service description.
   
   You must use :setting:`processManagement.windowsService.description` in conjunction with the
   ``--install`` option.
   
   For descriptions that contain spaces, you must enclose the
   description in quotes.


.. setting:: processManagement.windowsService.serviceUser

   *Type*: string

   The :binary:`~bin.mongos` or :binary:`~bin.mongod` service in the context of a certain user. This
   user must have "Log on as a service" privileges.
   
   You must use :setting:`processManagement.windowsService.serviceUser` in conjunction with the
   ``--install`` option.


.. setting:: processManagement.windowsService.servicePassword

   *Type*: string

   The password for ``<user>`` for :binary:`~bin.mongos` or :binary:`~bin.mongod` when running with
   the :setting:`processManagement.windowsService.serviceUser` option.
   
   You must use :setting:`processManagement.windowsService.servicePassword` in conjunction with the
   ``--install`` option.

