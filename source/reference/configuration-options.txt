==========================
Configuration File Options
==========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. important::

   .. versionchanged:: 2.6
      MongoDB 2.6 introduces a YAML-based configuration file format.
      The :v2.4:`2.4 configuration file format
      </reference/configuration-options>` remains for backward
      compatibility.

The following page describes the configuration options available in
MongoDB |version|. For configuration file options for other versions of
MongoDB, see the appropriate version of the MongoDB Manual.

Configuration File
------------------

You can configure :binary:`~bin.mongod` and :binary:`~bin.mongos` instances at
startup using a configuration file. The configuration file contains
settings that are equivalent to the :binary:`~bin.mongod` and
:binary:`~bin.mongos` command-line options.

Using a configuration file makes managing :binary:`~bin.mongod` and
:binary:`~bin.mongos` options easier, especially for large-scale
deployments. You can also add comments to the configuration file to
explain the server's settings.

If you installed from a package and have started MongoDB using your
system's :term:`control script`, you are already using a configuration
file.

File Format
~~~~~~~~~~~

.. versionchanged:: 2.6

The configuration file is in `YAML <http://www.yaml.org>`_ format. For
example, the following  contains various
:binary:`~bin.mongod` configuration settings in YAML format:

.. note::

   YAML does not accept tabs; use spaces instead.

.. code-block:: yaml

   systemLog:
      destination: file
      path: "/var/log/mongodb/mongodb.log"
      logAppend: true
   storage:
      journal:
         enabled: true
   processManagement:
      fork: true
   net:
      bindIp: 127.0.0.1
      port: 27017
   setParameter:
      enableLocalhostAuthBypass: false
   ...

Use the Configuration File
~~~~~~~~~~~~~~~~~~~~~~~~~~

To start :binary:`~bin.mongod` or :binary:`~bin.mongos` using a config file,
specify the config file with the ``--config`` option or the
``-f`` option, as in the following examples:

The following examples use :option:`mongod --config` and
:binary:`mongos --config` to specify the configuration file:

.. code-block:: sh

   mongod --config /etc/mongod.conf

   mongos --config /etc/mongos.conf

You can also use the ``-f`` alias to specify the configuration
file, as in the following:

.. code-block:: sh

   mongod -f /etc/mongod.conf

   mongos -f /etc/mongos.conf

If you installed from a package and have started MongoDB using your
system's :term:`control script`, you are already using a configuration
file.

Core Options
------------

``systemLog`` Options
~~~~~~~~~~~~~~~~~~~~~

.. code-block:: yaml

   systemLog:
      verbosity: <int>
      quiet: <boolean>
      traceAllExceptions: <boolean>
      syslogFacility: <string>
      path: <string>
      logAppend: <boolean>
      destination: <string>
      timeStampFormat: <string>

.. setting:: systemLog.verbosity

   *Type*: integer

   Increases the amount of internal reporting returned on standard output
   or in log files. To increase the amount of information reported, increase
   the number.
   


.. setting:: systemLog.quiet

   *Type*: boolean

   Runs the :binary:`~bin.mongos` or :binary:`~bin.mongod` in a quiet mode that attempts to limit the amount
   of output.

   This option is **not** recommended for production systems as it may make
   tracking problems during particular connections much more difficult.
   


.. setting:: systemLog.traceAllExceptions

   *Type*: boolean

   Prints verbose information for debugging. Used for additional logging in
   support-related troubleshooting.
   


.. setting:: systemLog.syslogFacility

   *Type*: string

   *Default*: user

   Specifies the facility level used when logging messages to syslog.
   The value you specify must be supported by your
   operating system's implementation of syslog. To use this option, you
   must set :setting:`systemLog.destination` to ``syslog``..


.. setting:: systemLog.path

   *Type*: string

   Sends all diagnostic logging information to a log file instead of to
   standard output or to the host's :term:`syslog` system. MongoDB creates
   the log file at the path you specify.
   
   By default, MongoDB overwrites the log file when the process restarts.
   To instead append to the log file, set the :option:`--logappend` option.
   


.. setting:: systemLog.logAppend

   *Type*: boolean

   *Default*: false

   Appends new entries to the end of the log file rather than overwriting
   the content of the log when the :binary:`~bin.mongos` or :binary:`~bin.mongod` instance restarts.


.. setting:: systemLog.destination

   *Type*: string

   Specify either ``file`` or ``syslog``. If you specify ``file`` you
   must also specify :setting:`systemLog.path`. If you do not specify
   :setting:`systemLog.destination`, MongoDB will send all log output
   to standard output.
   


.. setting:: systemLog.timeStampFormat

   *Type*: string

   *Default*: iso8601-local

   The time format for timestamps in log messages. Specify one of the
   following values:
   
   .. list-table::
      :header-rows: 1
      :widths: 20 40
   
      * - Value
   
        - Description
   
      * - ``ctime``
   
        - Displays timestamps as ``Wed Dec 31
          18:17:54.811``.
   
      * - ``iso8601-utc``
   
        - Displays timestamps in Coordinated Universal Time (UTC) in the
          ISO-8601 format. For example, for New York at the start of the
          Epoch: ``1970-01-01T00:00:00.000Z``
   
      * - ``iso8601-local``
   
        - Displays timestamps in local time in the ISO-8601
          format. For example, for New York at the start of the Epoch:
          ``1969-12-31T19:00:00.000-0500``
   


``processManagement`` Options
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: yaml

   processManagement:
      fork: <boolean>
      pidFilePath: <string>

.. setting:: processManagement.fork

   *Type*: boolean

   *Default*: false

   Enables a :term:`daemon` mode that runs the :binary:`~bin.mongos` or :binary:`~bin.mongod` process in the
   background. By default :binary:`~bin.mongos` or :binary:`~bin.mongod` does not run as a daemon:
   typically you will run :binary:`~bin.mongos` or :binary:`~bin.mongod` as a daemon, either by using
   :setting:`processManagement.fork` or by using a controlling process that handles the
   daemonization process (e.g. as with ``upstart`` and ``systemd``).


.. setting:: processManagement.pidFilePath

   *Type*: string

   Specifies a file location to hold the process ID of the :binary:`~bin.mongos` or :binary:`~bin.mongod`
   process where :binary:`~bin.mongos` or :binary:`~bin.mongod` will write its PID. This is useful for
   tracking the :binary:`~bin.mongos` or :binary:`~bin.mongod` process in combination with the
   :setting:`processManagement.fork` setting. Without a specified :setting:`processManagement.pidFilePath` option, the
   process creates no PID file.


``net`` Options
~~~~~~~~~~~~~~~

.. code-block:: yaml

   net:
      port: <int>
      bindIp: <string>
      maxIncomingConnections: <int>
      wireObjectCheck: <boolean>
      ipv6: <boolean>
      unixDomainSocket:
         enabled: <boolean>
         pathPrefix: <string>
      http:
         enabled: <boolean>
         JSONPEnabled: <boolean>
         RESTInterfaceEnabled: <boolean>
      ssl:
         sslOnNormalPorts: <boolean>  # deprecated since 2.6
         mode: <string>
         PEMKeyFile: <string>
         PEMKeyPassword: <string>
         clusterFile: <string>
         clusterPassword: <string>
         CAFile: <string>
         CRLFile: <string>
         weakCertificateValidation: <boolean>
         allowInvalidCertificates: <boolean>
         disabledProtocols: <string>
         FIPSMode: <boolean>

.. setting:: net.port

   *Type*: integer

   *Default*: 27017

   Specifies the TCP port on which the MongoDB instance listens for
   client connections.
   


.. setting:: net.bindIp

   *Type*: string

   *Default*: All interfaces.

   .. versionchanged:: 2.6.0
      The ``deb`` and ``rpm`` packages include a default
      configuration file that sets :setting:`net.bindIp` to ``127.0.0.1``.
   
   Specifies the IP address that :binary:`~bin.mongos` or :binary:`~bin.mongod` binds to in order to listen
   for connections from applications. You may attach :binary:`~bin.mongos` or :binary:`~bin.mongod` to any
   interface. When attaching :binary:`~bin.mongos` or :binary:`~bin.mongod` to a publicly accessible
   interface, ensure that you have implemented proper authentication and
   firewall restrictions to protect the integrity of your database.

   To bind to multiple IP addresses, enter a list of comma separated values.
   


.. setting:: net.maxIncomingConnections

   *Type*: integer

   *Default*: 1000000

   The maximum number of simultaneous connections that :binary:`~bin.mongos` or :binary:`~bin.mongod` will
   accept. This setting has no effect if it is higher than your operating
   system's configured maximum connection tracking threshold.
   
   .. versionchanged:: 2.6
      MongoDB removed the upward limit on the :setting:`~net.maxIncomingConnections` setting.

   This is particularly useful for a :binary:`~bin.mongos` if you have a client
   that creates a number of connections but allows them to timeout rather
   than close the connections. When you set this option, ensure the value
   is slightly higher than the size of the connection pool or the total
   number of connections, to prevent erroneous connection spikes from
   propagating to the members of a sharded cluster.
   


.. setting:: net.wireObjectCheck

   *Type*: boolean

   *Default*: true

   Forces the :binary:`~bin.mongod` or :binary:`~bin.mongos` instance to validate
   all requests from clients upon receipt to prevent clients from inserting
   malformed or invalid BSON into a MongoDB database.
   
   For objects with a high degree of sub-document nesting, :setting:`net.wireObjectCheck` can
   have a small impact on performance.


.. setting:: net.ipv6

   *Type*: boolean

   *Default*: false

   Enables IPv6 support and allows the :binary:`~bin.mongos` or :binary:`~bin.mongod` to connect to the
   MongoDB instance using an IPv6 network. All MongoDB programs and
   processes disable IPv6 support by default.


``net.unixDomainSocket`` Options
````````````````````````````````

.. code-block:: yaml

   net:
      unixDomainSocket:
         enabled: <boolean>
         pathPrefix: <string>

.. setting:: net.unixDomainSocket.enabled

   *Type*: boolean

   *Default*: false

   Disables listening on the UNIX domain socket. The :binary:`~bin.mongos` or :binary:`~bin.mongod` process
   always listens on the UNIX socket unless one of the following is true:
   
   - :setting:`net.unixDomainSocket.enabled` is set
   
   - :setting:`~net.bindIp` is not set
   
   - :setting:`~net.bindIp` does not specify ``127.0.0.1``
   
   .. |mongodb-package| replace:: :binary:`~bin.mongos` or :binary:`~bin.mongod`
   
   .. include:: /includes/note-deb-and-rpm-default-to-localhost.rst


.. setting:: net.unixDomainSocket.pathPrefix

   *Type*: string

   *Default*: /tmp

   The path for the UNIX socket. If this option has no value, the
   :binary:`~bin.mongos` or :binary:`~bin.mongod` process creates a socket with ``/tmp`` as a prefix. MongoDB
   creates and listens on a UNIX socket unless one of the following is true:
   
   - :setting:`net.unixDomainSocket.enabled` is ``false``
   
   - ``--nounixsocket`` is set
   
   - :setting:`~net.bindIp` is not set
   
   - :setting:`net.bindIp` does not specify ``127.0.0.1``



``net.http`` Options
````````````````````

.. code-block:: yaml

   net:
      http:
         enabled: <boolean>
         JSONPEnabled: <boolean>
         RESTInterfaceEnabled: <boolean>

.. setting:: net.http.enabled

   *Type*: boolean

   *Default*: false

   .. versionadded:: 2.6
   
   Enables the HTTP interface. Enabling the interface can increase
   network exposure.
   
   Leave the HTTP interface *disabled* for production deployments. If you
   *do* enable this interface, you should only allow trusted clients to
   access this port. See :ref:`security-firewalls`.
   
   .. include:: /includes/note-kerberos-unsupported-in-http-console.rst
   



.. setting:: net.http.JSONPEnabled

   *Type*: boolean

   *Default*: false

   Permits :term:`JSONP` access via an HTTP interface. Enabling the
   interface can increase network exposure. The :setting:`net.http.JSONPEnabled` option enables the
   HTTP interface, even if the :setting:`HTTP interface <net.http.enabled>`
   option is disabled.

   The :setting:`net.http.JSONPEnabled` option is available only for :binary:`~bin.mongod`.


.. setting:: net.http.RESTInterfaceEnabled

   *Type*: boolean

   *Default*: false

   Enables the simple :term:`REST` API. Enabling the :term:`REST` API
   enables the HTTP interface, even if the :setting:`HTTP interface
   <net.http.enabled>` option is disabled, and as a result can increase
   network exposure.
   

   The :setting:`net.http.RESTInterfaceEnabled` option is available only for :binary:`~bin.mongod`.


``net.ssl`` Options
```````````````````

.. code-block:: yaml

   net:
      ssl:
         sslOnNormalPorts: <boolean>  # deprecated since 2.6
         mode: <string>
         PEMKeyFile: <string>
         PEMKeyPassword: <string>
         clusterFile: <string>
         clusterPassword: <string>
         CAFile: <string>
         CRLFile: <string>
         weakCertificateValidation: <boolean>
         allowInvalidCertificates: <boolean>
         disabledProtocols: <string>
         FIPSMode: <boolean>


.. setting:: net.ssl.sslOnNormalPorts

   *Type*: boolean

   .. deprecated:: 2.6 Use :setting:`net.ssl.mode: requireSSL <~net.ssl.mode>` instead.
   
   Enables TLS/SSL for :binary:`~bin.mongos` or :binary:`~bin.mongod`.
   
   With :setting:`net.ssl.sslOnNormalPorts`, a :binary:`~bin.mongos` or :binary:`~bin.mongod` requires TLS/SSL encryption for all
   connections on the default MongoDB port, or the port specified by
   :setting:`net.port`. By default, :setting:`net.ssl.sslOnNormalPorts` is
   disabled.
   
   The default distribution of MongoDB does not contain support for
   TLS/SSL. For more information on MongoDB and TLS/SSL, see
   :doc:`/tutorial/configure-ssl`.


.. setting:: net.ssl.mode

   *Type*: string

   
   .. versionadded:: 2.6
   
   Enables TLS/SSL or mixed TLS/SSL used for all network connections. The
   argument to the :setting:`net.ssl.mode` option can be one of the following:
   
   .. list-table::
      :header-rows: 1
      :widths: 20 40
   
      * - Value
   
        - Description
   
   
      * - ``disabled``
   
        - The server does not use TLS/SSL.
   
      * - ``allowSSL``
   
        - Connections between servers do not use TLS/SSL. For incoming
          connections, the server accepts both TLS/SSL and
          non-TLS/non-SSL.
   
      * - ``preferSSL``
   
        - Connections between servers use TLS/SSL. For incoming
          connections, the server accepts both TLS/SSL and
          non-TLS/non-SSL.
   
   
      * - ``requireSSL``
   
        - The server uses and accepts only TLS/SSL encrypted
          connections.
   
   The default distribution of MongoDB does not contain support for
   TLS/SSL. For more information on MongoDB and TLS/SSL, see
   :doc:`/tutorial/configure-ssl`.


.. setting:: net.ssl.PEMKeyFile

   *Type*: string

   .. versionadded:: 2.2
   
   Specifies the :file:`.pem` file that contains both the TLS/SSL certificate
   and key. Specify the file name of the :file:`.pem` file using relative
   or absolute paths.
   
   When TLS/SSL is enabled, you must specify :setting:`net.ssl.PEMKeyFile`.
   
   The default distribution of MongoDB does not contain support for TLS/SSL.
   For more information on MongoDB and TLS/SSL, see :doc:`/tutorial/configure-ssl`.


.. setting:: net.ssl.PEMKeyPassword

   *Type*: string

   .. versionadded:: 2.2
   
   Specifies the password to de-crypt the certificate-key file (i.e.
   ``--sslPEMKeyFile``). Use the :setting:`net.ssl.PEMKeyPassword` option only if the
   certificate-key file is encrypted. In all cases, the :binary:`~bin.mongos` or :binary:`~bin.mongod` will
   redact the password from all logging and reporting output.
   
   .. versionchanged:: 2.6
      If the private key in the PEM file is encrypted and you do not
      specify the :setting:`net.ssl.PEMKeyPassword` option, the :binary:`~bin.mongos` or :binary:`~bin.mongod` will prompt for a
      passphrase. See :ref:`ssl-certificate-password`.
   
   The default distribution of MongoDB does not contain support for
   TLS/SSL. For more information on MongoDB and TLS/SSL, see
   :doc:`/tutorial/configure-ssl`.


.. setting:: net.ssl.clusterFile

   *Type*: string

   .. versionadded:: 2.6
   
   Specifies the :file:`.pem` file that contains the x.509 certificate-key
   file for :ref:`membership authentication <x509-internal-authentication>`
   for the cluster or replica set.
   
   If :setting:`net.ssl.clusterFile` does not specify the ``.pem`` file for internal cluster
   authentication, the cluster uses the ``.pem`` file specified in the
   :setting:`~net.ssl.PEMKeyFile` option.
   
   The default distribution of MongoDB does not contain support for
   TLS/SSL.  For more information on MongoDB and TLS/SSL, see
   :doc:`/tutorial/configure-ssl`.


.. setting:: net.ssl.clusterPassword

   *Type*: string

   .. versionadded:: 2.6
   
   Specifies the password to de-crypt the x.509 certificate-key file
   specified with ``--sslClusterFile``. Use the :setting:`net.ssl.clusterPassword` option only
   if the certificate-key file is encrypted. In all cases, the :binary:`~bin.mongos` or :binary:`~bin.mongod`
   will redact the password from all logging and reporting output.
   
   If the x.509 key file is encrypted and you do not specify the
   :setting:`net.ssl.clusterPassword` option, the :binary:`~bin.mongos` or :binary:`~bin.mongod` will prompt for a passphrase. See
   :ref:`ssl-certificate-password`.
   
   The default distribution of MongoDB does not contain support for TLS/SSL.
   For more information on MongoDB and TLS/SSL, see :doc:`/tutorial/configure-ssl`.


.. setting:: net.ssl.CAFile

   *Type*: string

   .. versionadded:: 2.4
   
   Specifies the :file:`.pem` file that contains the root certificate chain
   from the Certificate Authority. Specify the file name of the
   :file:`.pem` file using relative or absolute paths.
   
   The default distribution of MongoDB does not contain support for TLS/SSL.
   For more information on MongoDB and TLS/SSL, see :doc:`/tutorial/configure-ssl`.
   
   .. include:: /includes/warning-x509-requires-sslCAfile.rst
   


.. setting:: net.ssl.CRLFile

   *Type*: string

   .. versionadded:: 2.4
   
   Specifies the :file:`.pem` file that contains the Certificate Revocation
   List. Specify the file name of the :file:`.pem` file using relative or
   absolute paths.
   
   The default distribution of MongoDB does not contain support for TLS/SSL.
   For more information on MongoDB and TLS/SSL, see :doc:`/tutorial/configure-ssl`.
   


.. setting:: net.ssl.weakCertificateValidation

   *Type*: boolean

   .. versionadded:: 2.4
   
   Disables the requirement for TLS/SSL certificate validation that
   ``--sslCAFile`` enables. With the :setting:`net.ssl.weakCertificateValidation` option, the :binary:`~bin.mongos` or :binary:`~bin.mongod`
   will accept connections when the client does not present a certificate
   when establishing the connection.
   
   If the client presents a certificate and the :binary:`~bin.mongos` or :binary:`~bin.mongod` has :setting:`net.ssl.weakCertificateValidation`
   enabled, the :binary:`~bin.mongos` or :binary:`~bin.mongod` will validate the certificate using the root
   certificate chain specified by ``--sslCAFile`` and reject clients
   with invalid certificates.
   
   Use the :setting:`net.ssl.weakCertificateValidation` option if you have a mixed deployment that includes
   clients that do not or cannot present certificates to the :binary:`~bin.mongos` or :binary:`~bin.mongod`.
   
   The default distribution of MongoDB does not contain support for TLS/SSL.
   For more information on MongoDB and SSL, see :doc:`/tutorial/configure-ssl`.


.. setting:: net.ssl.allowInvalidCertificates

   *Type*: boolean

   .. versionadded:: 2.6.4
   
   Bypasses the validation checks for TLS/SSL certificates on other servers
   in the cluster and allows the use of invalid certificates. When using
   the :setting:`~net.ssl.allowInvalidCertificates` setting, MongoDB
   logs as a warning the use of the invalid certificate.
   
   The default distribution of MongoDB does not contain support for
   TLS/SSL. For more information on MongoDB and TLS/SSL, see
   :doc:`/tutorial/configure-ssl`.
   


.. setting:: net.ssl.disabledProtocols

   *Type*: string

   .. versionadded:: 2.6.12
   
   Prevents a MongoDB server running with SSL from accepting incoming
   connections that use a specific protocol or protocols. :setting:`net.ssl.disabledProtocols`
   recognizes the following protocols: ``TLS1_0``, ``TLS1_1``, and
   ``TLS1_2``. Specifying an unrecognized protocol will prevent the
   server from starting.
   
   To specify multiple protocols, use a comma separated list of
   protocols.
   
   Members of replica sets and sharded clusters must speak at least one
   protocol in common.
   
   .. seealso:: :ref:`ssl-disallow-protocols`


.. setting:: net.ssl.FIPSMode

   *Type*: boolean

   .. versionadded:: 2.4
   
   Directs the :binary:`~bin.mongos` or :binary:`~bin.mongod` to use the FIPS mode of the installed OpenSSL
   library. Your system must have a FIPS compliant OpenSSL library to use
   the :setting:`net.ssl.FIPSMode` option.
   
   The default distribution of MongoDB does not contain support for
   TLS/SSL. For more information on MongoDB and TLS/SSL, see
   :doc:`/tutorial/configure-ssl`.


``setParameter`` Option
~~~~~~~~~~~~~~~~~~~~~~~

.. setting:: setParameter

   Specifies MongoDB parameter or parameters described in
   :doc:`/reference/parameters`
   
   To set parameters in the YAML configuration file, use the following
   format for the specification:
   
   .. code-block:: yaml
   
      setParameter:
         <parameter1>: <value1>
         <parameter2>: <value2>
   
   For example, to specify the :parameter:`enableLocalhostAuthBypass` in
   the configuration file:
   
   .. code-block:: yaml
   
      setParameter:
         enableLocalhostAuthBypass: false
   


``security`` Options
~~~~~~~~~~~~~~~~~~~~

.. code-block:: yaml

   security:
      keyFile: <string>
      clusterAuthMode: <string>
      authorization: <string>
      javascriptEnabled:  <boolean>
      sasl:
         hostName: <string>
         serviceName: <string>
         saslauthdSocketPath: <string>


.. setting:: security.keyFile

   *Type*: string

   Specifies the path to a key file that stores the shared secret
   that MongoDB instances use to authenticate to each other in a
   :term:`sharded cluster` or :term:`replica set`. :setting:`~security.keyFile` implies
   :setting:`security.authorization`. See :ref:`inter-process-auth` for more
   information.


.. setting:: security.clusterAuthMode

   *Type*: string

   *Default*: keyFile

   .. versionadded:: 2.6
   
   The authentication mode used for cluster authentication. If you use
   :ref:`internal x.509 authentication <x509-internal-authentication>`,
   specify so here. This option can have one of the following values:
   
   .. list-table::
      :header-rows: 1
      :widths: 20 40
   
      * - Value
   
        - Description
   
      * - ``keyFile``
   
        - Use a keyfile for authentication.
          Accept only keyfiles.
   
      * - ``sendKeyFile``
   
        - For rolling upgrade purposes. Send a keyfile for
          authentication but can accept both keyfiles and x.509
          certificates.
   
      * - ``sendX509``
   
        - For rolling upgrade purposes. Send the x.509 certificate for
          authentication but can accept both keyfiles and x.509
          certificates.
   
      * - ``x509``
   
        - Recommended. Send the x.509 certificate for authentication and
          accept only x.509 certificates.
   
   The default distribution of MongoDB does not contain support for
   TLS/SSL. For more information on MongoDB and TLS/SSL, see
   :doc:`/tutorial/configure-ssl`.
   


.. setting:: security.authorization

   *Type*: string

   *Default*: disabled

   Enables Role-Based Access Control (RBAC) to govern each user's access to
   database resources and operations.
   
   Set this option to one of the following:
   
   .. list-table::
      :header-rows: 1
      :widths: 20 40
   
      * - Value
   
        - Description
   
      * - ``enabled``
   
        - A user can access only the database resources and actions for
          which they have been granted privileges.
   
      * - ``disabled``
   
        - A user can access any database and perform any action.
   
   See :doc:`/core/authorization` for more information.
   

   The :setting:`security.authorization` option is available only for :binary:`~bin.mongod`.


.. setting:: security.javascriptEnabled

   *Type*: boolean

   *Default*: true

   Enables or disables the :doc:`server-side JavaScript execution
   </core/server-side-javascript>`. When disabled, you cannot use
   operations that perform server-side execution of JavaScript code,
   such as the :query:`$where` query operator, :dbcommand:`mapReduce`
   command and the :method:`db.collection.mapReduce()` method,
   :dbcommand:`group` command and the :method:`db.collection.group()`
   method.
   


``security.sasl`` Options
`````````````````````````

.. code-block:: yaml

   security:
      sasl:
         hostName: <string>
         serviceName: <string>
         saslauthdSocketPath: <string>

.. setting:: security.sasl.hostName

   *Type*: string

   A fully qualified server domain name for the purpose of configuring SASL
   and Kerberos authentication. The SASL hostname overrides the hostname
   only for the configuration of SASL and Kerberos.
   
   For :binary:`~bin.mongo` shell and other MongoDB tools to connect to
   the new :setting:`~security.sasl.hostName`, see the
   ``gssapiHostName`` option in the :binary:`~bin.mongo` shell and other
   tools.
   


.. setting:: security.sasl.serviceName

   *Type*: string

   Registered name of the service using SASL. This option allows you to
   override the default :doc:`Kerberos
   </tutorial/control-access-to-mongodb-with-kerberos-authentication>`
   service name component of the :doc:`Kerberos
   </tutorial/control-access-to-mongodb-with-kerberos-authentication>`
   principal name, on a per-instance basis. If unspecified, the default
   value is ``mongodb``.
   
   MongoDB permits setting this option only at startup. The
   :dbcommand:`setParameter` can not change this setting.
   
   This option is available only in MongoDB Enterprise.
   
   .. important:: Ensure that your driver supports alternate service names.
      For :binary:`~bin.mongo` shell and other MongoDB tools to connect to the
      new :setting:`~security.sasl.serviceName`, see the
      ``gssapiServiceName`` option.
   


.. setting:: security.sasl.saslauthdSocketPath

   *Type*: string

   The path to the UNIX domain socket file for ``saslauthd``.
   


``operationProfiling`` Options
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: yaml

   operationProfiling:
      slowOpThresholdMs: <int>
      mode: <string>

.. setting:: operationProfiling.slowOpThresholdMs

   *Type*: integer

   *Default*: 100

   The threshold in milliseconds at which the database profiler considers a
   query slow. MongoDB records all slow queries to the log, even when the
   database profiler is off. When the profiler is on, it writes to the
   ``system.profile`` collection. See the :dbcommand:`profile` command for
   more information on the database profiler.
   

   The :setting:`operationProfiling.slowOpThresholdMs` option is available only for :binary:`~bin.mongod`.


.. setting:: operationProfiling.mode

   *Type*: string

   *Default*: off

   Changes the level of database profiling, which inserts information about
   operation performance into the ``system.profile`` collection. Specify one
   of the following levels:
   
   .. list-table::
      :header-rows: 1
      :widths: 20 40
   
      * - Level
   
        - Setting
   
      * - ``off``
   
        - Off. No profiling.
   
      * - ``slowOp``
   
        - On. Only includes slow operations.
   
      * - ``all``
   
        - On. Includes all operations.
   
   Database profiling can impact database
   performance. Enable this option only after careful consideration.
   

   The :setting:`operationProfiling.mode` option is available only for :binary:`~bin.mongod`.


``storage`` Options
~~~~~~~~~~~~~~~~~~~

.. code-block:: yaml

   storage:
      dbPath: <string>
      directoryPerDB: <boolean>
      indexBuildRetry: <boolean>
      preallocDataFiles: <boolean>
      nsSize: <int>
      smallFiles: <boolean>
      syncPeriodSecs: <int>
      repairPath: <string>
      journal:
         enabled: <boolean>
         debugFlags: <int>
         commitIntervalMs: <num>
      quota:
         enforced: <boolean>
         maxFilesPerDB: <int>

.. setting:: storage.dbPath

   *Type*: string

   *Default*: ``/data/db`` on Linux and macOS, ``\data\db`` on Windows

   The directory where the :binary:`~bin.mongod` instance stores its data.
   
   If you
   installed MongoDB using a package management system, check the
   ``/etc/mongod.conf`` file provided by your packages to see the
   directory is specified.

   The :setting:`storage.dbPath` option is available only for :binary:`~bin.mongod`.


.. setting:: storage.directoryPerDB

   *Type*: boolean

   *Default*: false

   Stores each database's files in its own folder in the :term:`data
   directory`. When applied to an existing system, the
   :setting:`~storage.directoryPerDB` option alters the storage pattern of the data
   directory.
   
   Use this option in conjunction with your file system and device
   configuration so that MongoDB will store data on a number of distinct
   disk devices to increase write throughput or disk capacity.
   
   .. warning::
   
      To enable this option for an **existing** system, migrate the
      database-specific data files to the new directory structure before
      enabling :setting:`~storage.directoryPerDB`. Database-specific data files
      begin with the name of an existing database and end with either
      "``ns``" or a number. For example, the following data directory
      includes files for the ``local`` and ``test`` databases:
   
      .. code-block:: none
   
         journal
         mongod.lock
         local.0
         local.1
         local.ns
         test.0
         test.1
         test.ns
   
      After migration, the data directory would have the following structure:
   
      .. code-block:: none
   
         journal
         mongod.lock
         local/local.0
         local/local.1
         local/local.ns
         test/test.0
         test/test.1
         test/test.ns
   

   The :setting:`storage.directoryPerDB` option is available only for :binary:`~bin.mongod`.


.. setting:: storage.indexBuildRetry

   *Type*: boolean

   *Default*: true

   Selects whether :binary:`~bin.mongod` rebuilds incomplete indexes on the
   next start up. This applies in cases where :binary:`~bin.mongod` restarts
   after it has shut down or stopped in the middle of an index build. In
   such cases, :binary:`~bin.mongod` always removes any incomplete indexes,
   and then, by default, attempts to rebuild them. To stop :binary:`~bin.mongod`
   from rebuilding indexes, set this option to ``false``.
   

   The :setting:`storage.indexBuildRetry` option is available only for :binary:`~bin.mongod`.


.. setting:: storage.preallocDataFiles

   *Type*: boolean

   *Default*: true

   Enables or disables data file preallocation.
   

   Do **not** disable data file preallocation in production systems. Only
   use this option for testing and with small data sets where you
   frequently drop databases.
   


.. setting:: storage.nsSize

   *Type*: integer

   *Default*: 16

   Specifies the default size for namespace files, which are files that end
   in ``.ns``. Each collection and index counts as a namespace.
   
   Use this setting to control size for newly created namespace files. This
   option has no impact on existing files. The maximum size for a namespace
   file is 2047 megabytes. The default value of 16 megabytes provides for
   approximately 24,000 namespaces.
   

   The :setting:`storage.nsSize` option is available only for :binary:`~bin.mongod`.


.. setting:: storage.smallFiles

   *Type*: boolean

   *Default*: false

   Sets MongoDB to use a smaller default file size. The :setting:`storage.smallFiles` option
   reduces the initial size for data files and limits the maximum size to
   512 megabytes. :setting:`storage.smallFiles` also reduces the size of each :term:`journal`
   file from 1 gigabyte to 128 megabytes. Use :setting:`storage.smallFiles` if you have a large
   number of databases that each holds a small quantity of data.
   
   The :setting:`storage.smallFiles` option can lead the :binary:`~bin.mongod` instance to create a large
   number of files, which can affect performance for larger databases.

   The :setting:`storage.smallFiles` option is available only for :binary:`~bin.mongod`.


.. setting:: storage.syncPeriodSecs

   *Type*: number

   *Default*: 60

   Controls how much time can pass before MongoDB flushes data to the data
   files via an :term:`fsync` operation. **Do not set this value on
   production systems.** In almost every situation, you should use the
   default setting.
   
   .. warning::
   
      If you set :setting:`storage.syncPeriodSecs` to ``0``, MongoDB will not sync the
      memory mapped files to disk.
   
   The :binary:`~bin.mongod` process writes data very quickly to the journal and
   lazily to the data files. :setting:`~storage.syncPeriodSecs` has no effect on the
   :setting:`journal <storage.journal.enabled>` files or :doc:`journaling </core/journaling>`.
   
   The :dbcommand:`serverStatus` command reports the background flush
   thread's status via the :data:`~serverStatus.backgroundFlushing` field.

   The :setting:`storage.syncPeriodSecs` option is available only for :binary:`~bin.mongod`.


.. setting:: storage.repairPath

   *Type*: string

   *Default*: A ``_tmp`` directory within the path specified by the
   :setting:`~storage.dbPath` option.

   Specifies a working directory that MongoDB will use during the
   :option:`--repair <mongod --repair>` operation. When ``--repair`` completes,
   :setting:`storage.repairPath` directory is empty, and
   :setting:`~storage.dbPath` contains the repaired files.

   The :setting:`storage.repairPath` option is available only for :binary:`~bin.mongod`.


``storage.journal`` Options
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: yaml

   storage:
      journal:
         enabled: <boolean>
         debugFlags: <int>
         commitIntervalMs: <num>
   
.. setting:: storage.journal.enabled

   *Type*: boolean

   *Default*: ``true`` on 64-bit systems, ``false`` on 32-bit systems

   Enables the durability :term:`journal` to ensure data files remain valid
   and recoverable. This option applies only when you specify the
   :setting:`storage.dbPath` setting. The :binary:`~bin.mongod` enables journaling by default
   on 64-bit builds of versions after 2.0.

   The :setting:`storage.journal.enabled` option is available only for :binary:`~bin.mongod`.


.. setting:: storage.journal.debugFlags

   *Type*: integer

   Provides functionality for testing. Not for general use, and will affect data
   file integrity in the case of abnormal system shutdown.
   

   The :setting:`storage.journal.debugFlags` option is available only for :binary:`~bin.mongod`.


.. setting:: storage.journal.commitIntervalMs

   *Type*: number

   *Default*: 100 or 30

   The maximum amount of time the :binary:`~bin.mongod` process allows between
   journal operations. Values can range from 2 to 300 milliseconds. Lower
   values increase the durability of the journal, at the expense of disk
   performance.
   
   The default journal commit interval is 100 milliseconds if a single
   block device (e.g. physical volume, RAID device, or LVM volume) contains
   both the journal and the data files.
   
   If the journal is on a different block device than the data files the
   default journal commit interval is 30 milliseconds.
   
   To force :binary:`~bin.mongod` to commit to the journal more frequently, you
   can specify ``j:true``. When a write operation with ``j:true`` is
   pending, :binary:`~bin.mongod` will reduce :setting:`~storage.journal.commitIntervalMs`
   to a third of the set value.

   The :setting:`storage.journal.commitIntervalMs` option is available only for :binary:`~bin.mongod`.


``storage.quota`` Options
~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: yaml

   storage:
      quota:
         enforced: <boolean>
         maxFilesPerDB: <int>
         
.. setting:: storage.quota.enforced

   *Type*: Boolean

   *Default*: false

   Enables a maximum limit for the number data files each database can
   have. When running with the :setting:`storage.quota.enforced` option, MongoDB has a maximum of 8
   data files per database. Adjust the quota with
   :setting:`storage.quota.maxFilesPerDB`.

   The :setting:`storage.quota.enforced` option is available only for :binary:`~bin.mongod`.


.. setting:: storage.quota.maxFilesPerDB

   *Type*: integer

   *Default*: 8

   Modifies the limit on the number of data files per database. :setting:`storage.quota.maxFilesPerDB`
   option requires that you set :setting:`storage.quota.enforced`.

   The :setting:`storage.quota.maxFilesPerDB` option is available only for :binary:`~bin.mongod`.


``replication`` Options
~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: yaml

   replication:
      oplogSizeMB: <int>
      replSetName: <string>
      secondaryIndexPrefetch: <string> 

.. setting:: replication.oplogSizeMB

   *Type*: integer

   Specifies a maximum size in megabytes for the replication operation log
   (i.e., the :term:`oplog`). The :binary:`~bin.mongod` process creates an
   :term:`oplog` based on the maximum amount of space available. For 64-bit
   systems, the oplog is typically 5% of available disk space. Once the
   :binary:`~bin.mongod` has created the oplog for the first time, changing the
   :setting:`replication.oplogSizeMB` option will not affect the size of the oplog.
   
   See :ref:`replica-set-oplog-sizing` for more information.

   The :setting:`replication.oplogSizeMB` option is available only for :binary:`~bin.mongod`.


.. setting:: replication.replSetName

   *Type*: string

   Configures replication. Specify a replica set name as an argument to
   this set. All hosts in the replica set must have the same set name.
   
   .. include:: /includes/fact-unique-replica-set-names.rst
   

   The :setting:`replication.replSetName` option is available only for :binary:`~bin.mongod`.


.. setting:: replication.secondaryIndexPrefetch

   *Type*: string

   *Default*: all

   .. versionadded:: 2.2
   
   Determines which indexes :term:`secondary` members of a :term:`replica
   set` load into memory before applying operations from the oplog. By
   default secondaries load all indexes related to an operation into memory
   before applying operations from the oplog. This option can have one of
   the following values:
   
   .. list-table::
      :header-rows: 1
      :widths: 20 40
   
      * - Value
   
        - Description
   
      * - ``none``
   
        - Secondaries do not load indexes into memory.
   
      * - ``all``
   
        - Secondaries load all indexes related to an operation.
   
      * - ``_id_only``
   
        - Secondaries load no additional indexes into memory beyond the
          already existing ``_id`` index.
   

   The :setting:`replication.secondaryIndexPrefetch` option is available only for :binary:`~bin.mongod`.



``sharding`` Options
~~~~~~~~~~~~~~~~~~~~

.. code-block:: yaml

   sharding:
      clusterRole: <string>
      archiveMovedChunks: <boolean>

.. setting:: sharding.clusterRole

   *Type*: string

   Selects the role the :binary:`~bin.mongod` instance has in the sharded
   cluster. Set this option to one of the following:
   
   .. list-table::
      :header-rows: 1
      :widths: 20 40
   
      * - Value
   
        - Description
   
      * - ``configsvr``
   
        - Start this instance as a :term:`config server`. The instance
          starts on port ``27019`` by default.
   
      * - ``shardsvr``
   
        - Start this instance as a :term:`shard`. The instance starts
          on port ``27018`` by default.
   

   The :setting:`sharding.clusterRole` option is available only for :binary:`~bin.mongod`.


.. setting:: sharding.archiveMovedChunks

   *Type*: boolean

   *Default*: true

   .. versionadded:: 2.4
   
   .. versionchanged:: 2.6 
      Starting in MongoDB 2.6, the default value for :setting:`sharding.archiveMovedChunks` is ``true``.
   
   When :setting:`sharding.archiveMovedChunks` is ``true``, the :binary:`~bin.mongod` instance saves all
   documents migrated from the shard to the ``moveChunk`` directory of
   the :setting:`storage.dbPath`. MongoDB does not delete data stored in
   ``moveChunk``.


``auditLog`` Options
~~~~~~~~~~~~~~~~~~~~

.. code-block:: yaml

   auditLog:
      destination: <string>
      format: <string>
      path: <string>
      filter: <string>

.. setting:: auditLog.destination

   *Type*: string

   .. versionadded:: 2.6
   
   Enables :doc:`auditing </core/auditing>`. The :setting:`auditLog.destination` option can
   have one of the following values:
   
   .. list-table::
      :header-rows: 1
      :widths: 15 50
   
      * - Value
   
        - Description
   
      * - ``syslog``
   
        - Output the audit events to syslog in JSON format. Not available on
          Windows. Audit messages have a syslog severity level of ``info``
          and a facility level of ``user``.
   
          The syslog message limit can result in the truncation of
          audit messages. The auditing system will neither detect the
          truncation nor error upon its occurrence.
   
      * - ``console``
   
        - Output the audit events to ``stdout`` in JSON format.
   
      * - ``file``
   
        - Output the audit events to the file specified in
          :setting:`auditLog.path` in the format specified in
          :setting:`auditLog.format`.
   
   .. include:: /includes/note-audit-in-enterprise-only.rst


.. setting:: auditLog.format

   *Type*: string

   .. versionadded:: 2.6
   
   Specifies the format of the output file for :doc:`auditing
   </core/auditing>` if :setting:`~auditLog.destination` is ``file``. The
   :setting:`auditLog.format` option can have one of the following values:
   
   .. list-table::
      :header-rows: 1
      :widths: 15 50
   
      * - Value
   
        - Description
   
      * - ``JSON``
   
        - Output the audit events in JSON format to the file specified
          in :setting:`auditLog.path`.
   
      * - ``BSON``
   
        - Output the audit events in BSON binary format to the file
          specified in :setting:`auditLog.path`.
   
   Printing audit events to a file in JSON format degrades server
   performance more than printing to a file in BSON format.
   
   .. include:: /includes/note-audit-in-enterprise-only.rst


.. setting:: auditLog.path

   *Type*: string

   .. versionadded:: 2.6
   
   Specifies the output file for :doc:`auditing </core/auditing>` if
   :setting:`~auditLog.destination`  has value of ``file``. The :setting:`auditLog.path`
   option can take either a full path name or a relative path name.
   
   .. include:: /includes/note-audit-in-enterprise-only.rst


.. setting:: auditLog.filter

   *Type*: string representation of a document

   .. versionadded:: 2.6
   
   Specifies the filter to limit the :ref:`types of operations
   <audit-action-details-results>` the :doc:`audit system
   </core/auditing>` records. The option takes a string representation
   of a query document of the form:
   
   .. code-block:: javascript
   
      { <field1>: <expression1>, ... }
   
   The ``<field>`` can be :doc:`any field in the audit message
   </reference/audit-message>`, including fields returned in the
   :ref:`param <audit-action-details-results>` document. The
   ``<expression>`` is a :ref:`query condition expression
   <query-selectors>`.
   
   .. include:: /includes/fact-audit-filter-single-quotes.rst
   
   .. include:: /includes/fact-audit-filter-yaml-configuration.rst
   
   .. include:: /includes/note-audit-in-enterprise-only.rst
   


``snmp`` Options
~~~~~~~~~~~~~~~~

.. code-block:: yaml

   snmp:
      subagent: <boolean>
      master: <boolean>

.. setting:: snmp.subagent

   *Type*: boolean

   Runs SNMP as a subagent. For more information, see
   :doc:`/tutorial/monitor-with-snmp`.
   

   The :setting:`snmp.subagent` option is available only for :binary:`~bin.mongod`.


.. setting:: snmp.master

   *Type*: boolean

   Runs SNMP as a master. For more information, see
   :doc:`/tutorial/monitor-with-snmp`.
   

   The :setting:`snmp.master` option is available only for :binary:`~bin.mongod`.


``mongos``\ -only Options
-------------------------

.. code-block:: yaml

   replication:
      localPingThresholdMs: <boolean>

   sharding:
      autoSplit: <boolean>
      configDB: <string>
      chunkSize: <int>

.. setting:: replication.localPingThresholdMs

   *Type*: integer

   *Default*: 15

   Affects the logic that :binary:`~bin.mongos` uses when selecting
   :term:`replica set` members to pass read operations from clients.
   Specify a value in milliseconds. The default value of ``15``
   corresponds to the default value in all of the client :doc:`drivers
   </applications/drivers>`.
   
   When :binary:`~bin.mongos` receives a request that permits reads to
   :term:`secondary` members, the :binary:`~bin.mongos` will:
   
   - Find the member of the set with the lowest ping time.
   
   - Construct a list of replica set members that is within a ping time of
     15 milliseconds of the nearest suitable member of the set.
   
     If you specify a value for the :setting:`replication.localPingThresholdMs` option, :binary:`~bin.mongos` will
     construct the list of replica members that are within the latency
     allowed by this value.
   
   - Select a member to read from at random from this list.
   
   The ping time used for a member compared by the :setting:`replication.localPingThresholdMs` setting is a
   moving average of recent ping times, calculated at most every 10
   seconds. As a result, some queries may reach members above the threshold
   until the :binary:`~bin.mongos` recalculates the average.
   
   See the :ref:`replica-set-read-preference-behavior-member-selection`
   section of the :doc:`read preference </core/read-preference>`
   documentation for more information.


.. setting:: sharding.autoSplit

   *Type*: boolean

   *Default*: true

   Enables or disables the automatic splitting of chunks for
   :term:`sharded collections <sharding>`. If :setting:`sharding.autoSplit` is ``false`` on
   all :binary:`~bin.mongos` instances, MongoDB does not create new chunks as the
   data in a collection grows. 
   
   Because any :binary:`~bin.mongos` in a cluster can create a split,
   to totally disable splitting in a cluster, you must set :setting:`sharding.autoSplit`
   to ``false`` on all :binary:`~bin.mongos`.

   
   .. warning::
   
      With auto-splitting disabled, the data in your sharded
      cluster may become imbalanced over time. Disable with caution.
   


.. setting:: sharding.configDB

   *Type*: string

   Specifies the :term:`configuration database <config database>` for the
   :term:`sharded cluster`. You must specify either 1 or 3
   configuration servers, in a comma separated list. **Always** use 3
   config servers in production environments.
   
   All :binary:`~bin.mongos` instances **must** specify the exact same value for
   :setting:`sharding.configDB`
   
   If your configuration databases reside in more that one data center,
   order the hosts so that first config sever in the list is the closest to the
   majority of your :binary:`~bin.mongos` instances.
   
   .. warning::
   
      Never remove a config server from this setting, even if the config
      server is not available or offline.


.. setting:: sharding.chunkSize

   *Type*: integer

   *Default*: 64

   Determines the size in megabytes of each :term:`chunk` in the
   :term:`sharded cluster`. A size of 64 megabytes is ideal in most
   deployments: larger chunk size can lead to uneven data distribution;
   smaller chunk size can lead to inefficient movement of chunks between
   nodes.
   
   This option affects chunk size *only* when you initialize the cluster
   for the first time. If you later modify the option, the new value has no
   effect. See the :doc:`/tutorial/modify-chunk-size-in-sharded-cluster`
   procedure if you need to change the chunk size on an existing sharded
   cluster.
   


Windows Service Options
-----------------------

.. code-block:: yaml

   processManagement:
      windowsService: 
         serviceName: <string>
         displayName: <string>
         description: <string>
         serviceUser: <string>
         servicePassword: <string>

.. setting:: processManagement.windowsService.serviceName

   *Type*: string

   *Default*: MongoDB

   Set the service name of :binary:`~bin.mongos` or :binary:`~bin.mongod` when running as a
   Windows Service. Use this name with the ``net start <name>`` and
   ``net stop <name>`` operations.
   
   You must use :setting:`processManagement.windowsService.serviceName` in conjunction with either
   the ``--install`` or ``--remove`` option.


.. setting:: processManagement.windowsService.displayName

   *Type*: string

   *Default*: MongoDB

   Sets the name listed for MongoDB on the Services administrative
   application.
   


.. setting:: processManagement.windowsService.description

   *Type*: string

   *Default*: MongoDB Server

   Sets the :binary:`~bin.mongos` or :binary:`~bin.mongod` service description.
   
   You must use :setting:`processManagement.windowsService.description` in conjunction with the
   ``--install`` option.
   
   For descriptions that contain spaces, you must enclose the
   description in quotes.


.. setting:: processManagement.windowsService.serviceUser

   *Type*: string

   Runs the :binary:`~bin.mongos` or :binary:`~bin.mongod` service in the context of a certain user. This
   user must have "Log on as a service" privileges.
   
   You must use :setting:`processManagement.windowsService.serviceUser` in conjunction with the
   ``--install`` option.


.. setting:: processManagement.windowsService.servicePassword

   *Type*: string

   The password for ``<user>`` for :binary:`~bin.mongos` or :binary:`~bin.mongod` when running with
   the :setting:`processManagement.windowsService.serviceUser` option.
   
   You must use :setting:`processManagement.windowsService.servicePassword` in conjunction with the
   ``--install`` option.

