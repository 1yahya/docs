======
create
======

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. dbcommand:: create

   Explicitly creates a collection. :dbcommand:`create` has the
   following form:

   .. code-block:: javascript

      {
        create: <collection_name>,
        capped: <true|false>,
        autoIndexId: <true|false>,
        size: <max_size>,
        max: <max_documents>,
        flags: <0|1|2|3>,
        storageEngine: <document>
      }

   :dbcommand:`create` has the following fields:


   .. list-table::
      :header-rows: 1
      :widths: 20 20 80
   
      * - Field
   
        - Type
   
        - Description
   
      * - ``create``
   
        - string
   
        - The name of the new collection.
          
          
   
      * - ``capped``
   
        - boolean
   
        - Optional. To create a :term:`capped collection`,
          specify ``true``. If you specify ``true``, you must also set a maximum
          size in the ``size`` field.
          
          
   
      * - ``autoIndexId``
   
        - boolean
   
        - Optional. Specify ``false`` to disable the automatic creation of an index on the
          ``_id`` field.
          
          .. important::
          
             For replica sets, all collections must have ``autoIndexId`` set to ``true``.
          
          
   
      * - ``size``
   
        - integer
   
        - Optional. Specify a maximum size in bytes for a capped collection. Once a
          capped collection reaches its maximum size, MongoDB removes the older
          documents to make space for the new documents. The ``size`` field is
          required for capped collections and ignored for other collections.
          
          
   
      * - ``max``
   
        - integer
   
        - Optional. The maximum number of documents allowed in the capped collection. The
          ``size`` limit takes precedence over this limit. If a capped
          collection reaches the ``size`` limit before it reaches the maximum
          number of documents, MongoDB removes old documents. If you prefer to
          use the ``max`` limit, ensure that the ``size`` limit, which is
          required for a capped collection, is sufficient to contain the
          maximum number of documents.
          
          
   
      * - ``flags``
   
        - integer
   
        - Optional. Available for the MMAPv1 storage engine only to set the
          :collflag:`usePowerOf2Sizes` and the :collflag:`noPadding` flags. To
          set, specify one of the following values:
          
          .. include:: /includes/list-collection-user-flags.rst
          
          Defaults to ``1``.
          
          .. versionadded:: 2.6
          
          .. versionchanged:: 3.0.0
             Add support for setting the new :collflag:`noPadding` flag.
          
          .. warning::
             Do not set ``noPadding`` if the workload includes removes or any
             updates that may cause documents to grow. For more information,
             see :ref:`exact-fit-allocation`.
          
          
   
      * - ``storageEngine``
   
        - document
   
        - Optional. Available for the WiredTiger storage engine only.
          
          .. versionadded:: 3.0
          
          Allows users to specify configuration to the storage engine on a
          per-collection basis when creating a collection. The value of the
          ``storageEngine`` option should take the following form:
          
          .. code-block:: javascript
          
             { <storage-engine-name>: <options> }
          
          Storage engine configuration specified when creating collections are
          validated and logged to the :term:`oplog` during replication to
          support replica sets with members that use different storage
          engines.
          
          
   


   The :method:`db.createCollection()` method wraps the
   :dbcommand:`create` command.

Considerations
--------------

The :dbcommand:`create` command obtains a write lock on the
affected database and will block other operations until it has
completed. The write lock for this operation is typically short
lived. However, allocations for large capped collections may take
longer.

Examples
--------

Create a Capped Collection
~~~~~~~~~~~~~~~~~~~~~~~~~~

To create a :term:`capped collection` limited to 64 kilobytes, issue
the command in the following form:

.. code-block:: javascript

   db.runCommand( { create: "collection", capped: true, size: 64 * 1024 } )

Specify Storage Engine Options
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. versionadded:: 3.0

You can specify collection-specific storage engine configuration
options when you create a collection with
:method:`db.createCollection()`. Consider the following operation:

.. code-block:: javascript

   db.runCommand( {
       create: "users",
       storageEngine: { wiredTiger: { configString: "<option>=<setting>" } }
   } )

This operation creates a new collection named ``users`` with a
specific configuration string that MongoDB will pass to the
``wiredTiger`` storage engine. See the `WiredTiger documentation of
collection level options <http://source.wiredtiger.com/2.4.1/struct_w_t___s_e_s_s_i_o_n.html#a358ca4141d59c345f401c58501276bbb>`_
for specific ``wiredTiger`` options.
