============
getLastError
============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. dbcommand:: getLastError

   Returns the error status of the preceding operation on the *current
   connection*. Clients typically use :dbcommand:`.getLastError` in
   combination with write operations to ensure that the write succeeds.

   :dbcommand:`getLastError` uses the following prototype form:

   .. code-block:: javascript

      { getLastError: 1 }

   :dbcommand:`getLastError` uses the following fields:


   .. list-table::
      :header-rows: 1
      :widths: 20 20 80
   
      * - Field
   
        - Type
   
        - Description
   
      * - ``j``
   
        - Boolean
   
        - If ``true``, wait for the next journal commit before returning, rather
          than waiting for a full disk flush. If :binary:`~bin.mongod` does not have
          journaling enabled, this option has no effect. If this option is
          enabled for a write operation, :binary:`~bin.mongod` will wait *no more*
          than 1/3 of the current :setting:`journalCommitInterval` before
          writing data to the journal.
          
          
   
      * - ``w``
   
        - integer or string
   
        - When running with replication, this is the number of servers to
          replicate to before returning. A ``w`` value of 1 indicates the
          primary only. A ``w`` value of 2 includes the primary and at least one
          secondary, etc. In place of a number, you may also set ``w`` to
          ``majority`` to indicate that the command should wait until the latest
          write propagates to a majority of replica set members. If using ``w``,
          you should also use ``wtimeout``. Specifying a value for ``w`` without
          also providing a ``wtimeout`` may cause :dbcommand:`getLastError` to
          block indefinitely.
          
          
   
      * - ``fsync``
   
        - Boolean
   
        - If ``true``, wait for :binary:`~bin.mongod` to write this data to disk
          before returning. Defaults to false. In most cases, use the ``j``
          option to ensure durability and consistency of the data set.
          
          
   
      * - ``wtimeout``
   
        - integer
   
        - Optional. Milliseconds. Specify a value in milliseconds to control how
          long to wait for write propagation to complete. If replication does
          not complete in the given timeframe, the :dbcommand:`getLastError`
          command will return with an error status.
          
          
   


   .. seealso:: :doc:`Write Concern </core/write-concern>`,
      :doc:`/reference/write-concern`, and :ref:`replica-set-write-concern`.

Output
------

Each :dbcommand:`~db.collection.getLastError()` command returns a document containing a
subset of the fields listed below.

.. data:: getLastError.ok

   :data:`~getLastError.ok` is ``true`` when the
   :dbcommand:`getLastError` command completes successfully.

   .. note:: A value of ``true`` does *not* indicate that the preceding
      operation did not produce an error.

.. data:: getLastError.err

   :data:`~getLastError.err` is ``null`` unless an error occurs. When
   there was an error with the preceding operation, ``err`` contains
   a textual description of the error.

.. data:: getLastError.code

   :data:`~getLastError.code` reports the preceding operation's error
   code.

.. data:: getLastError.connectionId

   The identifier of the connection.

.. data:: getLastError.lastOp

   When issued against a replica set member and the preceding
   operation was a write or update, :data:`~getLastError.lastOp` is the
   *optime* timestamp in the :term:`oplog`  of the change.

.. data:: getLastError.n

   :data:`~getLastError.n` reports the number of documents updated or
   removed, if the preceding operation was an update or remove
   operation.

.. data:: getLastError.shards

   When issued against a sharded cluster after a write operation,
   :data:`~getLastError.shards` identifies the shards targeted in the
   write operation. :data:`~getLastError.shards` is present in the
   output only if the write operation targets multiple shards.

.. data:: getLastError.singleShard

   When issued against a sharded cluster after a write operation,
   identifies the shard targeted in the write operation.
   :data:`~getLastError.singleShard` is only present if the write
   operation targets exactly one shard.

.. data:: getLastError.updatedExisting

   :data:`~getLastError.updatedExisting` is ``true`` when an update
   affects at least one document and does not result in an
   :term:`upsert`.

.. data:: getLastError.upserted

   :data:`~getLastError.upserted` is an :term:`ObjectId <objectid>`
   that corresponds to the upserted document if the update resulted in
   an insert. :data:`~getLastError.upserted`  is only present in the
   output of :dbcommand:`getLastError` if the update statement did
   *not* include an ``_id`` field.

.. data:: getLastError.wnote

   If set, ``wnote`` indicates that the preceding operation's error
   relates to using the ``w`` parameter to :dbcommand:`getLastError`.

   .. see:: :doc:`/reference/write-concern` for more information about
      ``w`` values.

.. data:: getLastError.wtimeout

   :data:`~getLastError.wtimeout` is ``true`` if the
   :dbcommand:`getLastError` timed out because of the ``wtimeout``
   setting to :dbcommand:`getLastError`.

.. data:: getLastError.waited

   If the preceding operation specified a timeout using the
   ``wtimeout`` setting to :dbcommand:`getLastError`, then
   :data:`~getLastError.waited` reports the number of milliseconds
   :dbcommand:`getLastError` waited before timing out.

.. data:: getLastError.writtenTo

   Array that lists the replica set members that have acknowledged the
   write operation.

.. data:: getLastError.wtime

   :data:`~getLastError.wtime` is the number of milliseconds spent
   waiting for the preceding operation to complete. If
   :dbcommand:`getLastError` timed out, :data:`~getLastError.wtime` and
   :dbcommand:`getLastError.waited` are equal.

.. _gle-examples:

Examples
--------

Confirm Replication to Two Replica Set Members
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following example ensures the operation has replicated to two
members (the primary and one other member):

.. code-block:: javascript

   db.runCommand( { getLastError: 1, w: 2 } )

Confirm Replication to a Majority of a Replica Set
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following example ensures the write operation has replicated to a
majority of the configured members of the set.

.. code-block:: javascript

   db.runCommand( { getLastError: 1, w: "majority" } )

Set a Timeout for a ``getLastError`` Response
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Unless you specify a timeout, a :dbcommand:`getLastError` command may
block forever if MongoDB cannot satisfy the requested write
concern. To specify a timeout of 5000 milliseconds, use an invocation
that resembles the following:

.. code-block:: javascript

   db.runCommand( { getLastError: 1, w: 2, wtimeout:5000 } )

When ``wtimeout`` is ``0``, the :dbcommand:`getLastError` operation
will never time out.
