=========
mapReduce
=========

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. dbcommand:: mapReduce

   The :dbcommand:`mapReduce` command allows you to run
   :term:`map-reduce` aggregation operations over a collection. The
   :dbcommand:`mapReduce` command has the following prototype
   form:

   .. code-block:: javascript

      db.runCommand(
                     {
                       mapReduce: <collection>,
                       map: <function>,
                       reduce: <function>,
                       out: <output>,
                       query: <document>,
                       sort: <document>,
                       limit: <number>,
                       finalize: <function>,
                       scope: <document>,
                       jsMode: <boolean>,
                       verbose: <boolean>
                     }
                   )

   Pass the name of the collection to the ``mapReduce`` command
   (i.e. ``<collection>``) to use as the source documents to perform
   the map reduce operation. The command also accepts the following
   parameters:


   .. list-table::
      :header-rows: 1
      :widths: 20 20 80
   
      * - Field
   
        - Type
   
        - Description
   
      * - ``mapReduce``
   
        - collection
   
        - The name of the collection on which you want to perform map-reduce.
          
          
   
      * - ``map``
   
        - Javascript function
   
        - A JavaScript function that associates or "maps" a ``value`` with a
          ``key`` and emits the ``key`` and value ``pair``.
          
          See :ref:`mapReduce-map-cmd` for more information.
          
          
   
      * - ``reduce``
   
        - JavaScript function
   
        - A JavaScript function that "reduces" to a single object all the
          ``values`` associated with a particular ``key``.
          
          See :ref:`mapReduce-reduce-cmd` for more information.
          
          
   
      * - ``out``
   
        - string or document
   
        - Specifies the location of the result of the map-reduce operation.
          You can output to a collection, output to a collection with an
          action, or output inline. You may output to a collection when
          performing map reduce operations on the primary members of the set;
          on :term:`secondary` members you may only use the ``inline`` output.
          
          See :ref:`mapReduce-out-cmd` for more information.
          
          
   
      * - ``query``
   
        - document
   
        - Optional. Specifies the selection criteria using :doc:`query operators
          </reference/operator>` for determining the documents input to the
          ``map`` function.
          
          
   
      * - ``sort``
   
        - document
   
        - Optional. Sorts the *input* documents. This option is useful for
          optimization. For example, specify the sort key to be the same as
          the emit key so that there are fewer reduce operations. The sort key
          must be in an existing index for this collection.
          
          
   
      * - ``limit``
   
        - number
   
        - Optional. Specifies a maximum number of documents to return from the
          collection.
          
          
   
      * - ``finalize``
   
        - Javascript function
   
        - Optional. Follows the ``reduce`` method and modifies the output.
          
          See :ref:`mapReduce-finalize-cmd` for more information.
          
          
   
      * - ``scope``
   
        - document
   
        - Optional. Specifies global variables that are accessible in the ``map``,
          ``reduce`` and ``finalize`` functions.
          
          
   
      * - ``jsMode``
   
        - Boolean
   
        - Optional. Specifies whether to convert intermediate data into BSON
          format between the execution of the ``map`` and ``reduce``
          functions. Defaults to false.
          
          If ``false``:
          
           - Internally, MongoDB converts the JavaScript objects emitted
             by the ``map``
             function to BSON objects. These BSON
             objects are then converted back to JavaScript objects when
             calling the ``reduce`` function.
          
           - The map-reduce operation places the intermediate BSON objects
             in temporary, on-disk storage. This allows the map-reduce
             operation to execute over arbitrarily large data sets.
          
           If ``true``:
          
           - Internally, the JavaScript objects emitted during ``map``
             function remain as JavaScript objects. There is no need to
             convert the objects for the ``reduce`` function, which
             can result in faster execution.
          
           - You can only use ``jsMode`` for result sets with fewer than
             500,000 distinct ``key`` arguments to the mapper's ``emit()``
             function.
          
           The ``jsMode`` defaults to false.
          
          
   
      * - ``verbose``
   
        - Boolean
   
        - Optional. Specifies whether to include the ``timing`` information in the
          result information. The ``verbose`` defaults to ``true`` to include
          the ``timing`` information.
          
          
   


   The following is a prototype usage of the :dbcommand:`mapReduce`
   command:

   .. code-block:: javascript

      var mapFunction = function() { ... };
      var reduceFunction = function(key, values) { ... };

      db.runCommand(
                     {
                       mapReduce: 'orders',
                       map: mapFunction,
                       reduce: reduceFunction,
                       out: { merge: 'map_reduce_results', db: 'test' },
                       query: { ord_date: { $gt: new Date('01/01/2012') } }
                     }
                   )

   .. |javascript-using-operation| replace:: :dbcommand:`mapReduce` uses
   .. include:: /includes/admonition-javascript-prevalence.rst

.. important:: When connected to a :binary:`~bin.mongos` for a sharded
   cluster, to use the :dbcommand:`mapReduce` directly, you must
   specify the all-lower-case form of the command (i.e.``mapreduce``.)

.. note::

   .. versionchanged:: 2.4

   .. include:: /includes/fact-group-map-reduce-where-limitations-in-24.rst

.. _mapreduce-map-cmd:

.. include:: /includes/parameters-map-reduce.rst
   :start-after: start-map
   :end-before: end-map

.. _mapreduce-reduce-cmd:

.. include:: /includes/parameters-map-reduce.rst
   :start-after: start-reduce
   :end-before: end-reduce

.. _mapreduce-out-cmd:

.. include:: /includes/parameters-map-reduce.rst
   :start-after: start-out
   :end-before: end-out

.. _mapreduce-finalize-cmd:

.. include:: /includes/parameters-map-reduce.rst
   :start-after: start-finalize
   :end-before: end-finalize

Examples
--------

In the :binary:`~bin.mongo` shell, the :method:`db.collection.mapReduce()`
method is a wrapper around the :dbcommand:`mapReduce` command. The
following examples use the :method:`db.collection.mapReduce()` method:

.. include:: /includes/examples-map-reduce.rst
   :start-after: map-reduce-document-prototype-begin

For more information and examples, see the
:doc:`Map-Reduce </core/map-reduce>` page and
:doc:`/tutorial/perform-incremental-map-reduce`.

.. seealso::

   - :doc:`/tutorial/troubleshoot-map-function`

   - :doc:`/tutorial/troubleshoot-reduce-function`

   - :method:`db.collection.mapReduce()`

   - :doc:`/core/aggregation`

.. slave-ok
